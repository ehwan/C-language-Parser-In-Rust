
// This file was generated by rustylr 1.25.0
// This generated code is targeting rusty_lr version 3.32.0.
// There might be a build error if the version is not matched.
//
// ================================User Codes Begin================================
use rusty_lr::lr1;
use super::declarator;
use super::declarator::Declarator;
use super::expression;
use super::expression::Expression;
use super::statement;
use super::statement::Statement;
use crate::token::Token;

// =================================User Codes End=================================
/*
====================================Grammar=====================================

# of terminal classes: 88
# of states: 882

0: Constant -> constant_character
1: Constant -> constant_integer
2: Constant -> constant_long
3: Constant -> constant_unsigned_integer
4: Constant -> constant_unsigned_long
5: Constant -> constant_float
6: Constant -> constant_double
7: primary_expression -> ident
8: primary_expression -> Constant
9: primary_expression -> string_literal
10: primary_expression -> lparen expression rparen
11: postfix_expression -> primary_expression
12: postfix_expression -> postfix_expression lbracket expression rbracket
13: postfix_expression -> postfix_expression lparen rparen
14: postfix_expression -> postfix_expression lparen argument_expression_list rparen
15: postfix_expression -> postfix_expression dot ident
16: postfix_expression -> postfix_expression ptr_op ident
17: postfix_expression -> postfix_expression inc_op
18: postfix_expression -> postfix_expression dec_op
19: argument_expression_list -> assignment_expression
20: argument_expression_list -> argument_expression_list comma assignment_expression
21: unary_expression -> postfix_expression
22: unary_expression -> inc_op unary_expression
23: unary_expression -> dec_op unary_expression
24: unary_expression -> ampersand cast_expression
25: unary_expression -> star cast_expression
26: unary_expression -> plus cast_expression
27: unary_expression -> minus cast_expression
28: unary_expression -> tilde cast_expression
29: unary_expression -> exclamation cast_expression
30: unary_expression -> sizeof unary_expression
31: unary_expression -> sizeof lparen type_name rparen
32: cast_expression -> unary_expression
33: cast_expression -> lparen type_name rparen cast_expression
34: multiplicative_expression -> cast_expression
35: multiplicative_expression -> multiplicative_expression star cast_expression
36: multiplicative_expression -> multiplicative_expression slash cast_expression
37: multiplicative_expression -> multiplicative_expression percent cast_expression
38: additive_expression -> multiplicative_expression
39: additive_expression -> additive_expression plus multiplicative_expression
40: additive_expression -> additive_expression minus multiplicative_expression
41: shift_expression -> additive_expression
42: shift_expression -> shift_expression left_op additive_expression
43: shift_expression -> shift_expression right_op additive_expression
44: relational_expression -> shift_expression
45: relational_expression -> relational_expression less shift_expression
46: relational_expression -> relational_expression greater shift_expression
47: relational_expression -> relational_expression le shift_expression
48: relational_expression -> relational_expression ge shift_expression
49: equality_expression -> relational_expression
50: equality_expression -> equality_expression eq relational_expression
51: equality_expression -> equality_expression ne relational_expression
52: and_expression -> equality_expression
53: and_expression -> and_expression ampersand equality_expression
54: exclusive_or_expression -> and_expression
55: exclusive_or_expression -> exclusive_or_expression caret and_expression
56: inclusive_or_expression -> exclusive_or_expression
57: inclusive_or_expression -> inclusive_or_expression pipe exclusive_or_expression
58: logical_and_expression -> inclusive_or_expression
59: logical_and_expression -> logical_and_expression and_op inclusive_or_expression
60: logical_or_expression -> logical_and_expression
61: logical_or_expression -> logical_or_expression or_op logical_and_expression
62: conditional_expression -> logical_or_expression
63: conditional_expression -> logical_or_expression question expression colon conditional_expression
64: assignment_expression -> conditional_expression
65: assignment_expression -> unary_expression assign assignment_expression
66: assignment_expression -> unary_expression mul_assign assignment_expression
67: assignment_expression -> unary_expression div_assign assignment_expression
68: assignment_expression -> unary_expression mod_assign assignment_expression
69: assignment_expression -> unary_expression add_assign assignment_expression
70: assignment_expression -> unary_expression sub_assign assignment_expression
71: assignment_expression -> unary_expression left_assign assignment_expression
72: assignment_expression -> unary_expression right_assign assignment_expression
73: assignment_expression -> unary_expression and_assign assignment_expression
74: assignment_expression -> unary_expression xor_assign assignment_expression
75: assignment_expression -> unary_expression or_assign assignment_expression
76: expression -> assignment_expression
77: expression -> expression comma assignment_expression
78: constant_expression -> conditional_expression
79: initializer -> assignment_expression
80: initializer -> lbrace initializer_list rbrace
81: initializer -> lbrace initializer_list comma rbrace
82: initializer_list -> initializer
83: initializer_list -> initializer_list comma initializer
84: labeled_statement -> ident colon statement
85: labeled_statement -> case constant_expression colon statement
86: labeled_statement -> default colon statement
87: statement_or_declaration -> statement
88: statement_or_declaration -> declaration
89: compound_statement -> lbrace statement_or_declaration* rbrace
90: expression_statement -> semicolon
91: expression_statement -> expression semicolon
92: selection_statement -> if_ lparen expression rparen statement
93: selection_statement -> if_ lparen expression rparen statement else_ statement
94: selection_statement -> switch lparen expression rparen statement
95: declaration_or_expression -> declaration
96: declaration_or_expression -> expression_statement
97: iteration_statement -> while_ lparen expression rparen statement
98: iteration_statement -> do_ statement while_ lparen expression rparen semicolon
99: iteration_statement -> for_ lparen declaration_or_expression expression_statement rparen statement
100: iteration_statement -> for_ lparen declaration_or_expression expression_statement expression rparen statement
101: jump_statement -> goto_ ident semicolon
102: jump_statement -> continue_ semicolon
103: jump_statement -> break_ semicolon
104: jump_statement -> return_ semicolon
105: jump_statement -> return_ expression semicolon
106: declaration -> declaration_specifier+ semicolon
107: declaration -> declaration_specifier+ init_declarator_list semicolon
108: function_definition -> declaration_specifier+ declarator compound_statement
109: function_definition -> declarator compound_statement
110: statement -> labeled_statement
111: statement -> compound_statement
112: statement -> expression_statement
113: statement -> selection_statement
114: statement -> iteration_statement
115: statement -> jump_statement
116: external_declaration -> function_definition
117: external_declaration -> declaration
118: translation_unit -> external_declaration*
119: type_qualifier -> const_
120: type_qualifier -> volatile
121: declarator -> direct_declarator
122: declarator -> star type_qualifier* declarator
123: direct_declarator -> ident
124: direct_declarator -> lparen declarator rparen
125: direct_declarator -> direct_declarator lbracket constant_expression rbracket
126: direct_declarator -> direct_declarator lbracket rbracket
127: direct_declarator -> direct_declarator lparen parameter_type_list rparen
128: direct_declarator -> direct_declarator lparen rparen
129: abstract_declarator -> star type_qualifier* abstract_declarator
130: abstract_declarator -> star type_qualifier*
131: abstract_declarator -> direct_abstract_declarator
132: direct_abstract_declarator -> lparen abstract_declarator rparen
133: direct_abstract_declarator -> lbracket rbracket
134: direct_abstract_declarator -> lbracket constant_expression rbracket
135: direct_abstract_declarator -> direct_abstract_declarator lbracket rbracket
136: direct_abstract_declarator -> direct_abstract_declarator lbracket constant_expression rbracket
137: direct_abstract_declarator -> lparen rparen
138: direct_abstract_declarator -> lparen parameter_type_list rparen
139: direct_abstract_declarator -> direct_abstract_declarator lparen rparen
140: direct_abstract_declarator -> direct_abstract_declarator lparen parameter_type_list rparen
141: specifier_qualifier -> type_qualifier
142: specifier_qualifier -> type_specifier
143: type_name -> specifier_qualifier+ abstract_declarator?
144: type_specifier -> void_
145: type_specifier -> char_
146: type_specifier -> short_
147: type_specifier -> int_
148: type_specifier -> long_
149: type_specifier -> float_
150: type_specifier -> double_
151: type_specifier -> signed
152: type_specifier -> unsigned
153: type_specifier -> struct_or_union_specifier
154: type_specifier -> enum_specifier
155: storage_class_specifier -> typedef
156: storage_class_specifier -> extern_
157: storage_class_specifier -> static_
158: storage_class_specifier -> auto
159: storage_class_specifier -> register
160: declaration_specifier -> storage_class_specifier
161: declaration_specifier -> type_specifier
162: declaration_specifier -> type_qualifier
163: parameter_declaration -> declaration_specifier+ declarator
164: parameter_declaration -> declaration_specifier+ abstract_declarator
165: parameter_declaration -> declaration_specifier+
166: parameter_list -> parameter_declaration
167: parameter_list -> parameter_list comma parameter_declaration
168: parameter_type_list -> parameter_list
169: parameter_type_list -> parameter_list comma ellipsis
170: struct_or_union -> struct_
171: struct_or_union -> union_
172: struct_declarator -> declarator
173: struct_declarator_list -> struct_declarator
174: struct_declarator_list -> struct_declarator_list comma struct_declarator
175: struct_declaration -> specifier_qualifier+ struct_declarator_list semicolon
176: struct_or_union_specifier -> struct_or_union ident? lbrace struct_declaration* rbrace
177: struct_or_union_specifier -> struct_or_union ident
178: enum_specifier -> enum_ ident? lbrace enumerator_list rbrace
179: enum_specifier -> enum_ ident
180: enumerator_list -> enumerator
181: enumerator_list -> enumerator_list comma enumerator
182: enumerator -> ident
183: enumerator -> ident assign constant_expression
184: init_declarator -> declarator
185: init_declarator -> declarator assign initializer
186: init_declarator_list -> init_declarator
187: init_declarator_list -> init_declarator_list comma init_declarator
188: statement_or_declaration+ -> statement_or_declaration
189: statement_or_declaration+ -> statement_or_declaration+ statement_or_declaration
190: statement_or_declaration* -> statement_or_declaration+
191: statement_or_declaration* -> 
192: declaration_specifier+ -> declaration_specifier
193: declaration_specifier+ -> declaration_specifier+ declaration_specifier
194: external_declaration+ -> external_declaration
195: external_declaration+ -> external_declaration+ external_declaration
196: external_declaration* -> external_declaration+
197: external_declaration* -> 
198: type_qualifier+ -> type_qualifier
199: type_qualifier+ -> type_qualifier+ type_qualifier
200: type_qualifier* -> type_qualifier+
201: type_qualifier* -> 
202: specifier_qualifier+ -> specifier_qualifier
203: specifier_qualifier+ -> specifier_qualifier+ specifier_qualifier
204: abstract_declarator? -> abstract_declarator
205: abstract_declarator? -> 
206: ident? -> ident
207: ident? -> 
208: struct_declaration+ -> struct_declaration
209: struct_declaration+ -> struct_declaration+ struct_declaration
210: struct_declaration* -> struct_declaration+
211: struct_declaration* -> 
212: Augmented -> translation_unit eof

*/
// =============================Generated Codes Begin==============================
/// type alias for `Context`
#[allow(non_camel_case_types, dead_code)]
pub type translation_unitContext = ::rusty_lr::parser::deterministic::Context<
    translation_unitDataStack,
    u16,
>;
/// type alias for CFG production rule
#[allow(non_camel_case_types, dead_code)]
pub type translation_unitRule = ::rusty_lr::rule::ProductionRule<
    &'static str,
    translation_unitNonTerminals,
>;
/// type alias for DFA state
#[allow(non_camel_case_types, dead_code)]
pub type translation_unitState = ::rusty_lr::parser::state::SparseState<
    u8,
    translation_unitNonTerminals,
    usize,
    u16,
>;
/// type alias for `ParseError`
#[allow(non_camel_case_types, dead_code)]
pub type translation_unitParseError = ::rusty_lr::parser::deterministic::ParseError<
    translation_unitDataStack,
>;
/// An enum that represents non-terminal symbols
#[allow(non_camel_case_types, dead_code)]
#[derive(
    Clone,
    Copy,
    std::hash::Hash,
    std::cmp::PartialEq,
    std::cmp::Eq,
    std::cmp::PartialOrd,
    std::cmp::Ord
)]
pub enum translation_unitNonTerminals {
    Constant,
    primary_expression,
    postfix_expression,
    argument_expression_list,
    unary_expression,
    cast_expression,
    multiplicative_expression,
    additive_expression,
    shift_expression,
    relational_expression,
    equality_expression,
    and_expression,
    exclusive_or_expression,
    inclusive_or_expression,
    logical_and_expression,
    logical_or_expression,
    conditional_expression,
    assignment_expression,
    expression,
    constant_expression,
    initializer,
    initializer_list,
    labeled_statement,
    statement_or_declaration,
    compound_statement,
    expression_statement,
    selection_statement,
    declaration_or_expression,
    iteration_statement,
    jump_statement,
    declaration,
    function_definition,
    statement,
    external_declaration,
    translation_unit,
    type_qualifier,
    declarator,
    direct_declarator,
    abstract_declarator,
    direct_abstract_declarator,
    specifier_qualifier,
    type_name,
    type_specifier,
    storage_class_specifier,
    declaration_specifier,
    parameter_declaration,
    parameter_list,
    parameter_type_list,
    struct_or_union,
    struct_declarator,
    struct_declarator_list,
    struct_declaration,
    struct_or_union_specifier,
    enum_specifier,
    enumerator_list,
    enumerator,
    init_declarator,
    init_declarator_list,
    _statement_or_declarationPlus58,
    _statement_or_declarationStar59,
    _declaration_specifierPlus60,
    _external_declarationPlus61,
    _external_declarationStar62,
    _type_qualifierPlus63,
    _type_qualifierStar64,
    _specifier_qualifierPlus65,
    _abstract_declaratorQuestion66,
    _identQuestion67,
    _struct_declarationPlus68,
    _struct_declarationStar69,
    Augmented,
}
impl std::fmt::Display for translation_unitNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use ::rusty_lr::nonterminal::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl std::fmt::Debug for translation_unitNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use ::rusty_lr::nonterminal::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl ::rusty_lr::nonterminal::NonTerminal for translation_unitNonTerminals {
    fn as_str(&self) -> &'static str {
        match self {
            translation_unitNonTerminals::Constant => "Constant",
            translation_unitNonTerminals::primary_expression => "primary_expression",
            translation_unitNonTerminals::postfix_expression => "postfix_expression",
            translation_unitNonTerminals::argument_expression_list => {
                "argument_expression_list"
            }
            translation_unitNonTerminals::unary_expression => "unary_expression",
            translation_unitNonTerminals::cast_expression => "cast_expression",
            translation_unitNonTerminals::multiplicative_expression => {
                "multiplicative_expression"
            }
            translation_unitNonTerminals::additive_expression => "additive_expression",
            translation_unitNonTerminals::shift_expression => "shift_expression",
            translation_unitNonTerminals::relational_expression => {
                "relational_expression"
            }
            translation_unitNonTerminals::equality_expression => "equality_expression",
            translation_unitNonTerminals::and_expression => "and_expression",
            translation_unitNonTerminals::exclusive_or_expression => {
                "exclusive_or_expression"
            }
            translation_unitNonTerminals::inclusive_or_expression => {
                "inclusive_or_expression"
            }
            translation_unitNonTerminals::logical_and_expression => {
                "logical_and_expression"
            }
            translation_unitNonTerminals::logical_or_expression => {
                "logical_or_expression"
            }
            translation_unitNonTerminals::conditional_expression => {
                "conditional_expression"
            }
            translation_unitNonTerminals::assignment_expression => {
                "assignment_expression"
            }
            translation_unitNonTerminals::expression => "expression",
            translation_unitNonTerminals::constant_expression => "constant_expression",
            translation_unitNonTerminals::initializer => "initializer",
            translation_unitNonTerminals::initializer_list => "initializer_list",
            translation_unitNonTerminals::labeled_statement => "labeled_statement",
            translation_unitNonTerminals::statement_or_declaration => {
                "statement_or_declaration"
            }
            translation_unitNonTerminals::compound_statement => "compound_statement",
            translation_unitNonTerminals::expression_statement => "expression_statement",
            translation_unitNonTerminals::selection_statement => "selection_statement",
            translation_unitNonTerminals::declaration_or_expression => {
                "declaration_or_expression"
            }
            translation_unitNonTerminals::iteration_statement => "iteration_statement",
            translation_unitNonTerminals::jump_statement => "jump_statement",
            translation_unitNonTerminals::declaration => "declaration",
            translation_unitNonTerminals::function_definition => "function_definition",
            translation_unitNonTerminals::statement => "statement",
            translation_unitNonTerminals::external_declaration => "external_declaration",
            translation_unitNonTerminals::translation_unit => "translation_unit",
            translation_unitNonTerminals::type_qualifier => "type_qualifier",
            translation_unitNonTerminals::declarator => "declarator",
            translation_unitNonTerminals::direct_declarator => "direct_declarator",
            translation_unitNonTerminals::abstract_declarator => "abstract_declarator",
            translation_unitNonTerminals::direct_abstract_declarator => {
                "direct_abstract_declarator"
            }
            translation_unitNonTerminals::specifier_qualifier => "specifier_qualifier",
            translation_unitNonTerminals::type_name => "type_name",
            translation_unitNonTerminals::type_specifier => "type_specifier",
            translation_unitNonTerminals::storage_class_specifier => {
                "storage_class_specifier"
            }
            translation_unitNonTerminals::declaration_specifier => {
                "declaration_specifier"
            }
            translation_unitNonTerminals::parameter_declaration => {
                "parameter_declaration"
            }
            translation_unitNonTerminals::parameter_list => "parameter_list",
            translation_unitNonTerminals::parameter_type_list => "parameter_type_list",
            translation_unitNonTerminals::struct_or_union => "struct_or_union",
            translation_unitNonTerminals::struct_declarator => "struct_declarator",
            translation_unitNonTerminals::struct_declarator_list => {
                "struct_declarator_list"
            }
            translation_unitNonTerminals::struct_declaration => "struct_declaration",
            translation_unitNonTerminals::struct_or_union_specifier => {
                "struct_or_union_specifier"
            }
            translation_unitNonTerminals::enum_specifier => "enum_specifier",
            translation_unitNonTerminals::enumerator_list => "enumerator_list",
            translation_unitNonTerminals::enumerator => "enumerator",
            translation_unitNonTerminals::init_declarator => "init_declarator",
            translation_unitNonTerminals::init_declarator_list => "init_declarator_list",
            translation_unitNonTerminals::_statement_or_declarationPlus58 => {
                "statement_or_declaration+"
            }
            translation_unitNonTerminals::_statement_or_declarationStar59 => {
                "statement_or_declaration*"
            }
            translation_unitNonTerminals::_declaration_specifierPlus60 => {
                "declaration_specifier+"
            }
            translation_unitNonTerminals::_external_declarationPlus61 => {
                "external_declaration+"
            }
            translation_unitNonTerminals::_external_declarationStar62 => {
                "external_declaration*"
            }
            translation_unitNonTerminals::_type_qualifierPlus63 => "type_qualifier+",
            translation_unitNonTerminals::_type_qualifierStar64 => "type_qualifier*",
            translation_unitNonTerminals::_specifier_qualifierPlus65 => {
                "specifier_qualifier+"
            }
            translation_unitNonTerminals::_abstract_declaratorQuestion66 => {
                "abstract_declarator?"
            }
            translation_unitNonTerminals::_identQuestion67 => "ident?",
            translation_unitNonTerminals::_struct_declarationPlus68 => {
                "struct_declaration+"
            }
            translation_unitNonTerminals::_struct_declarationStar69 => {
                "struct_declaration*"
            }
            translation_unitNonTerminals::Augmented => "Augmented",
        }
    }
    fn is_trace(&self) -> bool {
        match self {
            translation_unitNonTerminals::Constant => false,
            translation_unitNonTerminals::primary_expression => false,
            translation_unitNonTerminals::postfix_expression => false,
            translation_unitNonTerminals::argument_expression_list => false,
            translation_unitNonTerminals::unary_expression => false,
            translation_unitNonTerminals::cast_expression => false,
            translation_unitNonTerminals::multiplicative_expression => false,
            translation_unitNonTerminals::additive_expression => false,
            translation_unitNonTerminals::shift_expression => false,
            translation_unitNonTerminals::relational_expression => false,
            translation_unitNonTerminals::equality_expression => false,
            translation_unitNonTerminals::and_expression => false,
            translation_unitNonTerminals::exclusive_or_expression => false,
            translation_unitNonTerminals::inclusive_or_expression => false,
            translation_unitNonTerminals::logical_and_expression => false,
            translation_unitNonTerminals::logical_or_expression => false,
            translation_unitNonTerminals::conditional_expression => false,
            translation_unitNonTerminals::assignment_expression => false,
            translation_unitNonTerminals::expression => false,
            translation_unitNonTerminals::constant_expression => false,
            translation_unitNonTerminals::initializer => false,
            translation_unitNonTerminals::initializer_list => false,
            translation_unitNonTerminals::labeled_statement => false,
            translation_unitNonTerminals::statement_or_declaration => false,
            translation_unitNonTerminals::compound_statement => false,
            translation_unitNonTerminals::expression_statement => false,
            translation_unitNonTerminals::selection_statement => false,
            translation_unitNonTerminals::declaration_or_expression => false,
            translation_unitNonTerminals::iteration_statement => false,
            translation_unitNonTerminals::jump_statement => false,
            translation_unitNonTerminals::declaration => false,
            translation_unitNonTerminals::function_definition => false,
            translation_unitNonTerminals::statement => false,
            translation_unitNonTerminals::external_declaration => false,
            translation_unitNonTerminals::translation_unit => false,
            translation_unitNonTerminals::type_qualifier => false,
            translation_unitNonTerminals::declarator => false,
            translation_unitNonTerminals::direct_declarator => false,
            translation_unitNonTerminals::abstract_declarator => false,
            translation_unitNonTerminals::direct_abstract_declarator => false,
            translation_unitNonTerminals::specifier_qualifier => false,
            translation_unitNonTerminals::type_name => false,
            translation_unitNonTerminals::type_specifier => false,
            translation_unitNonTerminals::storage_class_specifier => false,
            translation_unitNonTerminals::declaration_specifier => false,
            translation_unitNonTerminals::parameter_declaration => false,
            translation_unitNonTerminals::parameter_list => false,
            translation_unitNonTerminals::parameter_type_list => false,
            translation_unitNonTerminals::struct_or_union => false,
            translation_unitNonTerminals::struct_declarator => false,
            translation_unitNonTerminals::struct_declarator_list => false,
            translation_unitNonTerminals::struct_declaration => false,
            translation_unitNonTerminals::struct_or_union_specifier => false,
            translation_unitNonTerminals::enum_specifier => false,
            translation_unitNonTerminals::enumerator_list => false,
            translation_unitNonTerminals::enumerator => false,
            translation_unitNonTerminals::init_declarator => false,
            translation_unitNonTerminals::init_declarator_list => false,
            translation_unitNonTerminals::_statement_or_declarationPlus58 => false,
            translation_unitNonTerminals::_statement_or_declarationStar59 => false,
            translation_unitNonTerminals::_declaration_specifierPlus60 => false,
            translation_unitNonTerminals::_external_declarationPlus61 => false,
            translation_unitNonTerminals::_external_declarationStar62 => false,
            translation_unitNonTerminals::_type_qualifierPlus63 => false,
            translation_unitNonTerminals::_type_qualifierStar64 => false,
            translation_unitNonTerminals::_specifier_qualifierPlus65 => false,
            translation_unitNonTerminals::_abstract_declaratorQuestion66 => false,
            translation_unitNonTerminals::_identQuestion67 => false,
            translation_unitNonTerminals::_struct_declarationPlus68 => false,
            translation_unitNonTerminals::_struct_declarationStar69 => false,
            translation_unitNonTerminals::Augmented => false,
        }
    }
    fn nonterm_type(&self) -> Option<::rusty_lr::nonterminal::NonTerminalType> {
        match self {
            translation_unitNonTerminals::Constant => None,
            translation_unitNonTerminals::primary_expression => None,
            translation_unitNonTerminals::postfix_expression => None,
            translation_unitNonTerminals::argument_expression_list => None,
            translation_unitNonTerminals::unary_expression => None,
            translation_unitNonTerminals::cast_expression => None,
            translation_unitNonTerminals::multiplicative_expression => None,
            translation_unitNonTerminals::additive_expression => None,
            translation_unitNonTerminals::shift_expression => None,
            translation_unitNonTerminals::relational_expression => None,
            translation_unitNonTerminals::equality_expression => None,
            translation_unitNonTerminals::and_expression => None,
            translation_unitNonTerminals::exclusive_or_expression => None,
            translation_unitNonTerminals::inclusive_or_expression => None,
            translation_unitNonTerminals::logical_and_expression => None,
            translation_unitNonTerminals::logical_or_expression => None,
            translation_unitNonTerminals::conditional_expression => None,
            translation_unitNonTerminals::assignment_expression => None,
            translation_unitNonTerminals::expression => None,
            translation_unitNonTerminals::constant_expression => None,
            translation_unitNonTerminals::initializer => None,
            translation_unitNonTerminals::initializer_list => None,
            translation_unitNonTerminals::labeled_statement => None,
            translation_unitNonTerminals::statement_or_declaration => None,
            translation_unitNonTerminals::compound_statement => None,
            translation_unitNonTerminals::expression_statement => None,
            translation_unitNonTerminals::selection_statement => None,
            translation_unitNonTerminals::declaration_or_expression => None,
            translation_unitNonTerminals::iteration_statement => None,
            translation_unitNonTerminals::jump_statement => None,
            translation_unitNonTerminals::declaration => None,
            translation_unitNonTerminals::function_definition => None,
            translation_unitNonTerminals::statement => None,
            translation_unitNonTerminals::external_declaration => None,
            translation_unitNonTerminals::translation_unit => None,
            translation_unitNonTerminals::type_qualifier => None,
            translation_unitNonTerminals::declarator => None,
            translation_unitNonTerminals::direct_declarator => None,
            translation_unitNonTerminals::abstract_declarator => None,
            translation_unitNonTerminals::direct_abstract_declarator => None,
            translation_unitNonTerminals::specifier_qualifier => None,
            translation_unitNonTerminals::type_name => None,
            translation_unitNonTerminals::type_specifier => None,
            translation_unitNonTerminals::storage_class_specifier => None,
            translation_unitNonTerminals::declaration_specifier => None,
            translation_unitNonTerminals::parameter_declaration => None,
            translation_unitNonTerminals::parameter_list => None,
            translation_unitNonTerminals::parameter_type_list => None,
            translation_unitNonTerminals::struct_or_union => None,
            translation_unitNonTerminals::struct_declarator => None,
            translation_unitNonTerminals::struct_declarator_list => None,
            translation_unitNonTerminals::struct_declaration => None,
            translation_unitNonTerminals::struct_or_union_specifier => None,
            translation_unitNonTerminals::enum_specifier => None,
            translation_unitNonTerminals::enumerator_list => None,
            translation_unitNonTerminals::enumerator => None,
            translation_unitNonTerminals::init_declarator => None,
            translation_unitNonTerminals::init_declarator_list => None,
            translation_unitNonTerminals::_statement_or_declarationPlus58 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusLeft)
            }
            translation_unitNonTerminals::_statement_or_declarationStar59 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Star)
            }
            translation_unitNonTerminals::_declaration_specifierPlus60 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusLeft)
            }
            translation_unitNonTerminals::_external_declarationPlus61 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusLeft)
            }
            translation_unitNonTerminals::_external_declarationStar62 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Star)
            }
            translation_unitNonTerminals::_type_qualifierPlus63 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusLeft)
            }
            translation_unitNonTerminals::_type_qualifierStar64 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Star)
            }
            translation_unitNonTerminals::_specifier_qualifierPlus65 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusLeft)
            }
            translation_unitNonTerminals::_abstract_declaratorQuestion66 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            translation_unitNonTerminals::_identQuestion67 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            translation_unitNonTerminals::_struct_declarationPlus68 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusLeft)
            }
            translation_unitNonTerminals::_struct_declarationStar69 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Star)
            }
            translation_unitNonTerminals::Augmented => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Augmented)
            }
        }
    }
    fn to_usize(&self) -> usize {
        *self as usize
    }
}
/// tag for token that represents which stack a token is using
#[allow(unused_braces, unused_parens, non_snake_case, non_camel_case_types)]
#[derive(Clone, Copy, PartialEq, Eq)]
pub enum translation_unitTags {
    __terminals,
    __stack2,
    __stack3,
    __stack4,
    __stack5,
    __stack6,
    __stack7,
    __stack8,
    __stack9,
    __stack10,
    __stack11,
    __stack12,
    __stack13,
    __stack14,
    __stack15,
    __stack16,
    __stack17,
    __stack18,
    __stack19,
    __stack20,
    __stack21,
    __stack22,
    __stack23,
    __stack24,
    __stack25,
    __stack26,
    __stack27,
    __stack28,
    __stack29,
    __stack30,
    __stack31,
    Empty,
}
/// enum for each non-terminal and terminal symbol, that actually hold data
#[allow(unused_braces, unused_parens, non_snake_case, non_camel_case_types)]
pub struct translation_unitDataStack {
    pub __tags: Vec<translation_unitTags>,
    __terminals: Vec<Token>,
    __stack2: Vec<Expression>,
    __stack3: Vec<Vec<Expression>>,
    __stack4: Vec<Statement>,
    __stack5: Vec<statement::TranslationUnit>,
    __stack6: Vec<declarator::TypeQualifier>,
    __stack7: Vec<Declarator>,
    __stack8: Vec<declarator::SpecifierQualifier>,
    __stack9: Vec<declarator::Typename>,
    __stack10: Vec<declarator::TypeSpecifier>,
    __stack11: Vec<declarator::StorageClassSpecifier>,
    __stack12: Vec<declarator::DeclarationSpecifier>,
    __stack13: Vec<declarator::ParameterDeclaration>,
    __stack14: Vec<Vec<declarator::ParameterDeclaration>>,
    __stack15: Vec<declarator::ParameterList>,
    __stack16: Vec<bool>,
    __stack17: Vec<Vec<Declarator>>,
    __stack18: Vec<declarator::StructDeclaration>,
    __stack19: Vec<declarator::StructOrUnionSpecifier>,
    __stack20: Vec<declarator::EnumSpecifier>,
    __stack21: Vec<Vec<declarator::Enumerator>>,
    __stack22: Vec<declarator::Enumerator>,
    __stack23: Vec<declarator::DeclInit>,
    __stack24: Vec<Vec<declarator::DeclInit>>,
    __stack25: Vec<Vec<Statement>>,
    __stack26: Vec<Vec<declarator::DeclarationSpecifier>>,
    __stack27: Vec<Vec<declarator::TypeQualifier>>,
    __stack28: Vec<Vec<declarator::SpecifierQualifier>>,
    __stack29: Vec<Option<Declarator>>,
    __stack30: Vec<Option<Token>>,
    __stack31: Vec<Vec<declarator::StructDeclaration>>,
}
impl Default for translation_unitDataStack {
    fn default() -> Self {
        Self {
            __tags: Vec::new(),
            __terminals: Vec::new(),
            __stack2: Vec::new(),
            __stack3: Vec::new(),
            __stack4: Vec::new(),
            __stack5: Vec::new(),
            __stack6: Vec::new(),
            __stack7: Vec::new(),
            __stack8: Vec::new(),
            __stack9: Vec::new(),
            __stack10: Vec::new(),
            __stack11: Vec::new(),
            __stack12: Vec::new(),
            __stack13: Vec::new(),
            __stack14: Vec::new(),
            __stack15: Vec::new(),
            __stack16: Vec::new(),
            __stack17: Vec::new(),
            __stack18: Vec::new(),
            __stack19: Vec::new(),
            __stack20: Vec::new(),
            __stack21: Vec::new(),
            __stack22: Vec::new(),
            __stack23: Vec::new(),
            __stack24: Vec::new(),
            __stack25: Vec::new(),
            __stack26: Vec::new(),
            __stack27: Vec::new(),
            __stack28: Vec::new(),
            __stack29: Vec::new(),
            __stack30: Vec::new(),
            __stack31: Vec::new(),
        }
    }
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
impl translation_unitDataStack {
    ///Constant -> constant_character
    #[inline]
    fn reduce_Constant_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut constant_character = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            if let Token::ConstantCharacter(value) = constant_character {
                Expression::ConstantCharacter(expression::ExprConstantCharacter {
                    value,
                })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///Constant -> constant_integer
    #[inline]
    fn reduce_Constant_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut constant_integer = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            if let Token::ConstantInteger(value) = constant_integer {
                Expression::ConstantInteger(expression::ExprConstantInteger {
                    value,
                })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///Constant -> constant_long
    #[inline]
    fn reduce_Constant_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut constant_long = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            if let Token::ConstantLong(value) = constant_long {
                Expression::ConstantLong(expression::ExprConstantLong {
                    value,
                })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///Constant -> constant_unsigned_integer
    #[inline]
    fn reduce_Constant_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut constant_unsigned_integer = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            if let Token::ConstantUnsignedInteger(value) = constant_unsigned_integer {
                Expression::ConstantUnsignedInteger(expression::ExprConstantUnsignedInteger {
                    value,
                })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///Constant -> constant_unsigned_long
    #[inline]
    fn reduce_Constant_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut constant_unsigned_long = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            if let Token::ConstantUnsignedLong(value) = constant_unsigned_long {
                Expression::ConstantUnsignedLong(expression::ExprConstantUnsignedLong {
                    value,
                })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///Constant -> constant_float
    #[inline]
    fn reduce_Constant_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut constant_float = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            if let Token::ConstantFloat(value) = constant_float {
                Expression::ConstantFloat(expression::ExprConstantFloat {
                    value,
                })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///Constant -> constant_double
    #[inline]
    fn reduce_Constant_6(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut constant_double = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            if let Token::ConstantDouble(value) = constant_double {
                Expression::ConstantDouble(expression::ExprConstantDouble {
                    value,
                })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///primary_expression -> ident
    #[inline]
    fn reduce_primary_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            if let Token::Identifier(name) = ident {
                Expression::Identifier(expression::ExprIdentifier { name })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///primary_expression -> string_literal
    #[inline]
    fn reduce_primary_expression_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut string_literal = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            if let Token::StringLiteral(value) = string_literal {
                Expression::String(expression::ExprString { value })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///primary_expression -> lparen expression rparen
    #[inline]
    fn reduce_primary_expression_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///postfix_expression -> postfix_expression lbracket expression rbracket
    #[inline]
    fn reduce_postfix_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        let mut expression = __data_stack.__stack2.pop().unwrap();
        let mut postfix_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        let __res = {
            Expression::Bracket(expression::ExprBracket {
                src: Box::new(postfix_expression),
                index: Box::new(expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///postfix_expression -> postfix_expression lparen rparen
    #[inline]
    fn reduce_postfix_expression_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut postfix_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Paren(expression::ExprParen {
                src: Box::new(postfix_expression),
                args: Vec::new(),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///postfix_expression -> postfix_expression lparen argument_expression_list rparen
    #[inline]
    fn reduce_postfix_expression_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack3)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        let mut postfix_expression = __data_stack.__stack2.pop().unwrap();
        let mut argument_expression_list = __data_stack.__stack3.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        let __res = {
            Expression::Paren(expression::ExprParen {
                src: Box::new(postfix_expression),
                args: argument_expression_list,
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///postfix_expression -> postfix_expression dot ident
    #[inline]
    fn reduce_postfix_expression_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut postfix_expression = __data_stack.__stack2.pop().unwrap();
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            if let Token::Identifier(name) = ident {
                Expression::Member(expression::ExprMember {
                    src: Box::new(postfix_expression),
                    member: name,
                })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///postfix_expression -> postfix_expression ptr_op ident
    #[inline]
    fn reduce_postfix_expression_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut postfix_expression = __data_stack.__stack2.pop().unwrap();
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            if let Token::Identifier(name) = ident {
                Expression::Arrow(expression::ExprArrow {
                    src: Box::new(postfix_expression),
                    member: name,
                })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///postfix_expression -> postfix_expression inc_op
    #[inline]
    fn reduce_postfix_expression_6(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut postfix_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::Unary(expression::ExprUnary {
                op: expression::ExprUnaryOperator::IncrementPost,
                src: Box::new(postfix_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///postfix_expression -> postfix_expression dec_op
    #[inline]
    fn reduce_postfix_expression_7(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut postfix_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::Unary(expression::ExprUnary {
                op: expression::ExprUnaryOperator::DecrementPost,
                src: Box::new(postfix_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///argument_expression_list -> assignment_expression
    #[inline]
    fn reduce_argument_expression_list_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack3);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![assignment_expression] };
        __data_stack.__stack3.push(__res);
        Ok(true)
    }
    ///argument_expression_list -> argument_expression_list comma assignment_expression
    #[inline]
    fn reduce_argument_expression_list_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack3)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut argument_expression_list = __data_stack.__stack3.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            argument_expression_list.push(assignment_expression);
            argument_expression_list
        };
        __data_stack.__stack3.push(__res);
        Ok(true)
    }
    ///unary_expression -> postfix_expression
    #[inline]
    fn reduce_unary_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut postfix_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = postfix_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///unary_expression -> inc_op unary_expression
    #[inline]
    fn reduce_unary_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::Unary(expression::ExprUnary {
                op: expression::ExprUnaryOperator::IncrementPre,
                src: Box::new(unary_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///unary_expression -> dec_op unary_expression
    #[inline]
    fn reduce_unary_expression_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::Unary(expression::ExprUnary {
                op: expression::ExprUnaryOperator::DecrementPre,
                src: Box::new(unary_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///unary_expression -> ampersand cast_expression
    #[inline]
    fn reduce_unary_expression_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut cast_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::Unary(expression::ExprUnary {
                op: expression::ExprUnaryOperator::AddressOf,
                src: Box::new(cast_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///unary_expression -> star cast_expression
    #[inline]
    fn reduce_unary_expression_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut cast_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::Unary(expression::ExprUnary {
                op: expression::ExprUnaryOperator::Dereference,
                src: Box::new(cast_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///unary_expression -> plus cast_expression
    #[inline]
    fn reduce_unary_expression_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut cast_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::Unary(expression::ExprUnary {
                op: expression::ExprUnaryOperator::Plus,
                src: Box::new(cast_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///unary_expression -> minus cast_expression
    #[inline]
    fn reduce_unary_expression_6(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut cast_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::Unary(expression::ExprUnary {
                op: expression::ExprUnaryOperator::Minus,
                src: Box::new(cast_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///unary_expression -> tilde cast_expression
    #[inline]
    fn reduce_unary_expression_7(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut cast_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::Unary(expression::ExprUnary {
                op: expression::ExprUnaryOperator::BitwiseNot,
                src: Box::new(cast_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///unary_expression -> exclamation cast_expression
    #[inline]
    fn reduce_unary_expression_8(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut cast_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::Unary(expression::ExprUnary {
                op: expression::ExprUnaryOperator::LogicalNot,
                src: Box::new(cast_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///unary_expression -> sizeof unary_expression
    #[inline]
    fn reduce_unary_expression_9(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Expression::SizeofExpr(expression::ExprSizeOfExpr {
                expr: Box::new(unary_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///unary_expression -> sizeof lparen type_name rparen
    #[inline]
    fn reduce_unary_expression_10(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack9)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut type_name = __data_stack.__stack9.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        let __res = {
            Expression::SizeofType(expression::ExprSizeOfType {
                typename: type_name,
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///cast_expression -> unary_expression
    #[inline]
    fn reduce_cast_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = unary_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///cast_expression -> lparen type_name rparen cast_expression
    #[inline]
    fn reduce_cast_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack9)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut cast_expression = __data_stack.__stack2.pop().unwrap();
        let mut type_name = __data_stack.__stack9.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        let __res = {
            Expression::Cast(expression::ExprCast {
                src: Box::new(cast_expression),
                typename: type_name,
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///multiplicative_expression -> multiplicative_expression star cast_expression
    #[inline]
    fn reduce_multiplicative_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut cast_expression = __data_stack.__stack2.pop().unwrap();
        let mut multiplicative_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::Mul,
                lhs: Box::new(multiplicative_expression),
                rhs: Box::new(cast_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///multiplicative_expression -> multiplicative_expression slash cast_expression
    #[inline]
    fn reduce_multiplicative_expression_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut cast_expression = __data_stack.__stack2.pop().unwrap();
        let mut multiplicative_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::Div,
                lhs: Box::new(multiplicative_expression),
                rhs: Box::new(cast_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///multiplicative_expression -> multiplicative_expression percent cast_expression
    #[inline]
    fn reduce_multiplicative_expression_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut cast_expression = __data_stack.__stack2.pop().unwrap();
        let mut multiplicative_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::Mod,
                lhs: Box::new(multiplicative_expression),
                rhs: Box::new(cast_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///additive_expression -> multiplicative_expression
    #[inline]
    fn reduce_additive_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut multiplicative_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = multiplicative_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///additive_expression -> additive_expression plus multiplicative_expression
    #[inline]
    fn reduce_additive_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut multiplicative_expression = __data_stack.__stack2.pop().unwrap();
        let mut additive_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::Add,
                lhs: Box::new(additive_expression),
                rhs: Box::new(multiplicative_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///additive_expression -> additive_expression minus multiplicative_expression
    #[inline]
    fn reduce_additive_expression_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut multiplicative_expression = __data_stack.__stack2.pop().unwrap();
        let mut additive_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::Sub,
                lhs: Box::new(additive_expression),
                rhs: Box::new(multiplicative_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///shift_expression -> additive_expression
    #[inline]
    fn reduce_shift_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut additive_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = additive_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///shift_expression -> shift_expression left_op additive_expression
    #[inline]
    fn reduce_shift_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut additive_expression = __data_stack.__stack2.pop().unwrap();
        let mut shift_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::ShiftLeft,
                lhs: Box::new(shift_expression),
                rhs: Box::new(additive_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///shift_expression -> shift_expression right_op additive_expression
    #[inline]
    fn reduce_shift_expression_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut additive_expression = __data_stack.__stack2.pop().unwrap();
        let mut shift_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::ShiftRight,
                lhs: Box::new(shift_expression),
                rhs: Box::new(additive_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///relational_expression -> shift_expression
    #[inline]
    fn reduce_relational_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut shift_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = shift_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///relational_expression -> relational_expression less shift_expression
    #[inline]
    fn reduce_relational_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut shift_expression = __data_stack.__stack2.pop().unwrap();
        let mut relational_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::LessThan,
                lhs: Box::new(relational_expression),
                rhs: Box::new(shift_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///relational_expression -> relational_expression greater shift_expression
    #[inline]
    fn reduce_relational_expression_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut shift_expression = __data_stack.__stack2.pop().unwrap();
        let mut relational_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::GreaterThan,
                lhs: Box::new(relational_expression),
                rhs: Box::new(shift_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///relational_expression -> relational_expression le shift_expression
    #[inline]
    fn reduce_relational_expression_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut shift_expression = __data_stack.__stack2.pop().unwrap();
        let mut relational_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::LessThanOrEqual,
                lhs: Box::new(relational_expression),
                rhs: Box::new(shift_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///relational_expression -> relational_expression ge shift_expression
    #[inline]
    fn reduce_relational_expression_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut shift_expression = __data_stack.__stack2.pop().unwrap();
        let mut relational_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::GreaterThanOrEqual,
                lhs: Box::new(relational_expression),
                rhs: Box::new(shift_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///equality_expression -> relational_expression
    #[inline]
    fn reduce_equality_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut relational_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = relational_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///equality_expression -> equality_expression eq relational_expression
    #[inline]
    fn reduce_equality_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut relational_expression = __data_stack.__stack2.pop().unwrap();
        let mut equality_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::Equal,
                lhs: Box::new(equality_expression),
                rhs: Box::new(relational_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///equality_expression -> equality_expression ne relational_expression
    #[inline]
    fn reduce_equality_expression_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut relational_expression = __data_stack.__stack2.pop().unwrap();
        let mut equality_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::NotEqual,
                lhs: Box::new(equality_expression),
                rhs: Box::new(relational_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///and_expression -> equality_expression
    #[inline]
    fn reduce_and_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut equality_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = equality_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///and_expression -> and_expression ampersand equality_expression
    #[inline]
    fn reduce_and_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut equality_expression = __data_stack.__stack2.pop().unwrap();
        let mut and_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::BitwiseAnd,
                lhs: Box::new(and_expression),
                rhs: Box::new(equality_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///exclusive_or_expression -> and_expression
    #[inline]
    fn reduce_exclusive_or_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut and_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = and_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///exclusive_or_expression -> exclusive_or_expression caret and_expression
    #[inline]
    fn reduce_exclusive_or_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut and_expression = __data_stack.__stack2.pop().unwrap();
        let mut exclusive_or_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::BitwiseXor,
                lhs: Box::new(exclusive_or_expression),
                rhs: Box::new(and_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///inclusive_or_expression -> exclusive_or_expression
    #[inline]
    fn reduce_inclusive_or_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut exclusive_or_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = exclusive_or_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///inclusive_or_expression -> inclusive_or_expression pipe exclusive_or_expression
    #[inline]
    fn reduce_inclusive_or_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut exclusive_or_expression = __data_stack.__stack2.pop().unwrap();
        let mut inclusive_or_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::BitwiseOr,
                lhs: Box::new(inclusive_or_expression),
                rhs: Box::new(exclusive_or_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///logical_and_expression -> inclusive_or_expression
    #[inline]
    fn reduce_logical_and_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut inclusive_or_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = inclusive_or_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///logical_and_expression -> logical_and_expression and_op inclusive_or_expression
    #[inline]
    fn reduce_logical_and_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut inclusive_or_expression = __data_stack.__stack2.pop().unwrap();
        let mut logical_and_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::LogicalAnd,
                lhs: Box::new(logical_and_expression),
                rhs: Box::new(inclusive_or_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///logical_or_expression -> logical_and_expression
    #[inline]
    fn reduce_logical_or_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut logical_and_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = logical_and_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///logical_or_expression -> logical_or_expression or_op logical_and_expression
    #[inline]
    fn reduce_logical_or_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut logical_and_expression = __data_stack.__stack2.pop().unwrap();
        let mut logical_or_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::LogicalOr,
                lhs: Box::new(logical_or_expression),
                rhs: Box::new(logical_and_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///conditional_expression -> logical_or_expression
    #[inline]
    fn reduce_conditional_expression_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        let mut logical_or_expression = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = logical_or_expression;
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///conditional_expression -> logical_or_expression question expression colon conditional_expression
    #[inline]
    fn reduce_conditional_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        let mut conditional_expression = __data_stack.__stack2.pop().unwrap();
        let mut expression = __data_stack.__stack2.pop().unwrap();
        let mut logical_or_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 5usize);
        let __res = {
            Expression::Conditional(expression::ExprConditional {
                cond: Box::new(logical_or_expression),
                then_expr: Box::new(expression),
                else_expr: Box::new(conditional_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::Assign(false),
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression mul_assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::MulAssign,
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression div_assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::DivAssign,
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression mod_assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::ModAssign,
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression add_assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::AddAssign,
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression sub_assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_6(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::SubAssign,
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression left_assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_7(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::ShiftLeftAssign,
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression right_assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_8(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::ShiftRightAssign,
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression and_assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_9(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::BitwiseAndAssign,
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression xor_assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_10(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::BitwiseXorAssign,
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///assignment_expression -> unary_expression or_assign assignment_expression
    #[inline]
    fn reduce_assignment_expression_11(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut unary_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::BitwiseOrAssign,
                lhs: Box::new(unary_expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///expression -> expression comma assignment_expression
    #[inline]
    fn reduce_expression_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut assignment_expression = __data_stack.__stack2.pop().unwrap();
        let mut expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::Binary(expression::ExprBinary {
                op: expression::ExprBinaryOperator::Comma,
                lhs: Box::new(expression),
                rhs: Box::new(assignment_expression),
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///initializer -> lbrace initializer_list rbrace
    #[inline]
    fn reduce_initializer_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack3)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut initializer_list = __data_stack.__stack3.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Expression::InitializerList(expression::ExprInitializerList {
                initializers: initializer_list,
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///initializer -> lbrace initializer_list comma rbrace
    #[inline]
    fn reduce_initializer_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack3)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(translation_unitTags::__stack2);
        let mut initializer_list = __data_stack.__stack3.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        let __res = {
            Expression::InitializerList(expression::ExprInitializerList {
                initializers: initializer_list,
            })
        };
        __data_stack.__stack2.push(__res);
        Ok(true)
    }
    ///initializer_list -> initializer
    #[inline]
    fn reduce_initializer_list_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack3);
        let mut initializer = __data_stack.__stack2.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![initializer] };
        __data_stack.__stack3.push(__res);
        Ok(true)
    }
    ///initializer_list -> initializer_list comma initializer
    #[inline]
    fn reduce_initializer_list_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack3)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut initializer = __data_stack.__stack2.pop().unwrap();
        let mut initializer_list = __data_stack.__stack3.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            initializer_list.push(initializer);
            initializer_list
        };
        __data_stack.__stack3.push(__res);
        Ok(true)
    }
    ///labeled_statement -> ident colon statement
    #[inline]
    fn reduce_labeled_statement_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut statement = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            if let Token::Identifier(label) = ident {
                Statement::Labeled(statement::StmtLabeled {
                    label,
                    statement: Box::new(statement),
                })
            } else {
                unreachable!()
            }
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///labeled_statement -> case constant_expression colon statement
    #[inline]
    fn reduce_labeled_statement_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 4usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut constant_expression = __data_stack.__stack2.pop().unwrap();
        let mut statement = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        let __res = {
            Statement::Case(statement::StmtCase {
                value: constant_expression,
                statement: Box::new(statement),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///labeled_statement -> default colon statement
    #[inline]
    fn reduce_labeled_statement_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut statement = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Statement::Default(statement::StmtDefault {
                statement: Box::new(statement),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///compound_statement -> lbrace statement_or_declaration* rbrace
    #[inline]
    fn reduce_compound_statement_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack25)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut statement_or_declaration = __data_stack.__stack25.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Statement::Compound(statement::StmtCompound {
                statements: statement_or_declaration,
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///expression_statement -> semicolon
    #[inline]
    fn reduce_expression_statement_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { Statement::Null(statement::StmtNull {}) };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///expression_statement -> expression semicolon
    #[inline]
    fn reduce_expression_statement_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack2)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Statement::Expression(statement::StmtExpression {
                expression: expression,
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///selection_statement -> if_ lparen expression rparen statement
    #[inline]
    fn reduce_selection_statement_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 5usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut expression = __data_stack.__stack2.pop().unwrap();
        let mut statement = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 5usize);
        let __res = {
            Statement::If(statement::StmtIf {
                cond: expression,
                then_statement: Box::new(statement),
                else_statement: None,
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///selection_statement -> if_ lparen expression rparen statement else_ statement
    #[inline]
    fn reduce_selection_statement_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 5usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 6usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 7usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut expression = __data_stack.__stack2.pop().unwrap();
        let mut elsestmt = __data_stack.__stack4.pop().unwrap();
        let mut thenstmt = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 4usize);
        __location_stack.truncate(__location_stack.len() - 7usize);
        let __res = {
            Statement::If(statement::StmtIf {
                cond: expression,
                then_statement: Box::new(thenstmt),
                else_statement: Some(Box::new(elsestmt)),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///selection_statement -> switch lparen expression rparen statement
    #[inline]
    fn reduce_selection_statement_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 5usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut expression = __data_stack.__stack2.pop().unwrap();
        let mut statement = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 5usize);
        let __res = {
            Statement::Switch(statement::StmtSwitch {
                target: expression,
                statement: Box::new(statement),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///iteration_statement -> while_ lparen expression rparen statement
    #[inline]
    fn reduce_iteration_statement_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 5usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut expression = __data_stack.__stack2.pop().unwrap();
        let mut statement = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 5usize);
        let __res = {
            Statement::While(statement::StmtWhile {
                cond: expression,
                statement: Box::new(statement),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///iteration_statement -> do_ statement while_ lparen expression rparen semicolon
    #[inline]
    fn reduce_iteration_statement_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 5usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 6usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 7usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut expression = __data_stack.__stack2.pop().unwrap();
        let mut statement = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 5usize);
        __location_stack.truncate(__location_stack.len() - 7usize);
        let __res = {
            Statement::DoWhile(statement::StmtDoWhile {
                cond: expression,
                statement: Box::new(statement),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///iteration_statement -> for_ lparen declaration_or_expression expression_statement rparen statement
    #[inline]
    fn reduce_iteration_statement_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 5usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 6usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut body = __data_stack.__stack4.pop().unwrap();
        let mut cond = __data_stack.__stack4.pop().unwrap();
        let mut init = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 6usize);
        let __res = {
            let Statement::Expression(cond) = cond else { unreachable!() };
            Statement::For(statement::StmtFor {
                init: Box::new(init),
                cond: cond.expression,
                next: None,
                statement: Box::new(body),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///iteration_statement -> for_ lparen declaration_or_expression expression_statement expression rparen statement
    #[inline]
    fn reduce_iteration_statement_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 5usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 6usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 7usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut next = __data_stack.__stack2.pop().unwrap();
        let mut body = __data_stack.__stack4.pop().unwrap();
        let mut cond = __data_stack.__stack4.pop().unwrap();
        let mut init = __data_stack.__stack4.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 7usize);
        let __res = {
            let Statement::Expression(cond) = cond else { unreachable!() };
            Statement::For(statement::StmtFor {
                init: Box::new(init),
                cond: cond.expression,
                next: Some(next),
                statement: Box::new(body),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///jump_statement -> goto_ ident semicolon
    #[inline]
    fn reduce_jump_statement_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            let Token::Identifier(ident) = ident else { unreachable!() };
            Statement::Goto(statement::StmtGoto {
                label: ident,
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///jump_statement -> continue_ semicolon
    #[inline]
    fn reduce_jump_statement_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = { Statement::Continue(statement::StmtContinue {}) };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///jump_statement -> break_ semicolon
    #[inline]
    fn reduce_jump_statement_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = { Statement::Break(statement::StmtBreak {}) };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///jump_statement -> return_ semicolon
    #[inline]
    fn reduce_jump_statement_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Statement::Return(statement::StmtReturn {
                expr: None,
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///jump_statement -> return_ expression semicolon
    #[inline]
    fn reduce_jump_statement_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Statement::Return(statement::StmtReturn {
                expr: Some(expression),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///declaration -> declaration_specifier+ semicolon
    #[inline]
    fn reduce_declaration_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack26)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut declaration_specifier = __data_stack.__stack26.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Statement::Declaration(statement::StmtDeclaration {
                specs: declaration_specifier,
                inits: None,
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///declaration -> declaration_specifier+ init_declarator_list semicolon
    #[inline]
    fn reduce_declaration_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack24)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack26)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut inits = __data_stack.__stack24.pop().unwrap();
        let mut declaration_specifier = __data_stack.__stack26.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Statement::Declaration(statement::StmtDeclaration {
                specs: declaration_specifier,
                inits: Some(inits),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///function_definition -> declaration_specifier+ declarator compound_statement
    #[inline]
    fn reduce_function_definition_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack7)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack26)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut declaration_specifier = __data_stack.__stack26.pop().unwrap();
        let mut compound_statement = __data_stack.__stack4.pop().unwrap();
        let mut declarator = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Statement::FunctionDefinition(statement::StmtFunctionDefinition {
                specs: Some(declaration_specifier),
                decl: declarator,
                body: Box::new(compound_statement),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///function_definition -> declarator compound_statement
    #[inline]
    fn reduce_function_definition_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack4);
        let mut compound_statement = __data_stack.__stack4.pop().unwrap();
        let mut declarator = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Statement::FunctionDefinition(statement::StmtFunctionDefinition {
                specs: None,
                decl: declarator,
                body: Box::new(compound_statement),
            })
        };
        __data_stack.__stack4.push(__res);
        Ok(true)
    }
    ///translation_unit -> external_declaration*
    #[inline]
    fn reduce_translation_unit_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack25)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack5);
        let mut external_declaration = __data_stack.__stack25.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            statement::TranslationUnit {
                statements: external_declaration,
            }
        };
        __data_stack.__stack5.push(__res);
        Ok(true)
    }
    ///type_qualifier -> const_
    #[inline]
    fn reduce_type_qualifier_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack6);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeQualifier::Const };
        __data_stack.__stack6.push(__res);
        Ok(true)
    }
    ///type_qualifier -> volatile
    #[inline]
    fn reduce_type_qualifier_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack6);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeQualifier::Volatile };
        __data_stack.__stack6.push(__res);
        Ok(true)
    }
    ///declarator -> direct_declarator
    #[inline]
    fn reduce_declarator_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        let mut direct_declarator = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = direct_declarator;
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///declarator -> star type_qualifier* declarator
    #[inline]
    fn reduce_declarator_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack7)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack27)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack7);
        let mut type_qualifier = __data_stack.__stack27.pop().unwrap();
        let mut declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            while let Some(type_qual) = type_qualifier.pop() {
                match type_qual {
                    declarator::TypeQualifier::Const => {
                        declarator = Declarator::Const(declarator::DeclConst {
                            declarator: Some(Box::new(declarator)),
                        });
                    }
                    declarator::TypeQualifier::Volatile => {
                        declarator = Declarator::Volatile(declarator::DeclVolatile {
                            declarator: Some(Box::new(declarator)),
                        });
                    }
                }
            }
            declarator = Declarator::Pointer(declarator::DeclPointer {
                declarator: Some(Box::new(declarator)),
            });
            declarator
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_declarator -> ident
    #[inline]
    fn reduce_direct_declarator_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack7);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Token::Identifier(name) = ident else { unreachable!() };
            Declarator::Identifier(declarator::DeclIdentifier { name })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_declarator -> lparen declarator rparen
    #[inline]
    fn reduce_direct_declarator_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack7)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack7);
        let mut declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = declarator;
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_declarator -> direct_declarator lbracket constant_expression rbracket
    #[inline]
    fn reduce_direct_declarator_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        let mut constant_expression = __data_stack.__stack2.pop().unwrap();
        let mut direct_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        let __res = {
            Declarator::ArrayFixed(declarator::DeclArrayFixed {
                declarator: Some(Box::new(direct_declarator)),
                size: constant_expression,
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_declarator -> direct_declarator lbracket rbracket
    #[inline]
    fn reduce_direct_declarator_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut direct_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Declarator::ArrayUnbounded(declarator::DeclArrayUnbounded {
                declarator: Some(Box::new(direct_declarator)),
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_declarator -> direct_declarator lparen parameter_type_list rparen
    #[inline]
    fn reduce_direct_declarator_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack15)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        let mut parameter_type_list = __data_stack.__stack15.pop().unwrap();
        let mut direct_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        let __res = {
            Declarator::Function(declarator::DeclFunction {
                declarator: Some(Box::new(direct_declarator)),
                params: parameter_type_list,
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_declarator -> direct_declarator lparen rparen
    #[inline]
    fn reduce_direct_declarator_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut direct_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Declarator::Function(declarator::DeclFunction {
                declarator: Some(Box::new(direct_declarator)),
                params: declarator::ParameterList {
                    params: Vec::new(),
                    variadic: false,
                },
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///abstract_declarator -> star type_qualifier* abstract_declarator
    #[inline]
    fn reduce_abstract_declarator_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack7)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack27)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack7);
        let mut type_qualifier = __data_stack.__stack27.pop().unwrap();
        let mut abstract_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            let mut declarator = abstract_declarator;
            while let Some(type_qual) = type_qualifier.pop() {
                match type_qual {
                    declarator::TypeQualifier::Const => {
                        declarator = Declarator::Const(declarator::DeclConst {
                            declarator: Some(Box::new(declarator)),
                        });
                    }
                    declarator::TypeQualifier::Volatile => {
                        declarator = Declarator::Volatile(declarator::DeclVolatile {
                            declarator: Some(Box::new(declarator)),
                        });
                    }
                }
            }
            declarator = Declarator::Pointer(declarator::DeclPointer {
                declarator: Some(Box::new(declarator)),
            });
            declarator
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///abstract_declarator -> star type_qualifier*
    #[inline]
    fn reduce_abstract_declarator_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack27)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack7);
        let mut type_qualifier = __data_stack.__stack27.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            let mut declarator = None;
            while let Some(type_qual) = type_qualifier.pop() {
                match type_qual {
                    declarator::TypeQualifier::Const => {
                        declarator = Some(
                            Declarator::Const(declarator::DeclConst {
                                declarator: declarator.map(Box::new),
                            }),
                        );
                    }
                    declarator::TypeQualifier::Volatile => {
                        declarator = Some(
                            Declarator::Volatile(declarator::DeclVolatile {
                                declarator: declarator.map(Box::new),
                            }),
                        );
                    }
                }
            }
            Declarator::Pointer(declarator::DeclPointer {
                declarator: declarator.map(Box::new),
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///abstract_declarator -> direct_abstract_declarator
    #[inline]
    fn reduce_abstract_declarator_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        let mut direct_abstract_declarator = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = direct_abstract_declarator;
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_abstract_declarator -> lparen abstract_declarator rparen
    #[inline]
    fn reduce_direct_abstract_declarator_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack7)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack7);
        let mut abstract_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = abstract_declarator;
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_abstract_declarator -> lbracket rbracket
    #[inline]
    fn reduce_direct_abstract_declarator_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack7);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Declarator::ArrayUnbounded(declarator::DeclArrayUnbounded {
                declarator: None,
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_abstract_declarator -> lbracket constant_expression rbracket
    #[inline]
    fn reduce_direct_abstract_declarator_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack7);
        let mut constant_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Declarator::ArrayFixed(declarator::DeclArrayFixed {
                declarator: None,
                size: constant_expression,
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_abstract_declarator -> direct_abstract_declarator lbracket rbracket
    #[inline]
    fn reduce_direct_abstract_declarator_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut direct_abstract_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Declarator::ArrayUnbounded(declarator::DeclArrayUnbounded {
                declarator: Some(Box::new(direct_abstract_declarator)),
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_abstract_declarator -> direct_abstract_declarator lbracket constant_expression rbracket
    #[inline]
    fn reduce_direct_abstract_declarator_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        let mut constant_expression = __data_stack.__stack2.pop().unwrap();
        let mut direct_abstract_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        let __res = {
            Declarator::ArrayFixed(declarator::DeclArrayFixed {
                declarator: Some(Box::new(direct_abstract_declarator)),
                size: constant_expression,
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_abstract_declarator -> lparen rparen
    #[inline]
    fn reduce_direct_abstract_declarator_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack7);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Declarator::Function(declarator::DeclFunction {
                declarator: None,
                params: declarator::ParameterList {
                    params: Vec::new(),
                    variadic: false,
                },
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_abstract_declarator -> lparen parameter_type_list rparen
    #[inline]
    fn reduce_direct_abstract_declarator_6(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack15)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack7);
        let mut parameter_type_list = __data_stack.__stack15.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Declarator::Function(declarator::DeclFunction {
                declarator: None,
                params: parameter_type_list,
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_abstract_declarator -> direct_abstract_declarator lparen rparen
    #[inline]
    fn reduce_direct_abstract_declarator_7(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut direct_abstract_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            Declarator::Function(declarator::DeclFunction {
                declarator: Some(Box::new(direct_abstract_declarator)),
                params: declarator::ParameterList {
                    params: Vec::new(),
                    variadic: false,
                },
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///direct_abstract_declarator -> direct_abstract_declarator lparen parameter_type_list rparen
    #[inline]
    fn reduce_direct_abstract_declarator_8(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack15)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        let mut parameter_type_list = __data_stack.__stack15.pop().unwrap();
        let mut direct_abstract_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 4usize);
        let __res = {
            Declarator::Function(declarator::DeclFunction {
                declarator: Some(Box::new(direct_abstract_declarator)),
                params: parameter_type_list,
            })
        };
        __data_stack.__stack7.push(__res);
        Ok(true)
    }
    ///specifier_qualifier -> type_qualifier
    #[inline]
    fn reduce_specifier_qualifier_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack6)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack8);
        let mut type_qualifier = __data_stack.__stack6.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::SpecifierQualifier::TypeQualifier(type_qualifier) };
        __data_stack.__stack8.push(__res);
        Ok(true)
    }
    ///specifier_qualifier -> type_specifier
    #[inline]
    fn reduce_specifier_qualifier_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack10)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack8);
        let mut type_specifier = __data_stack.__stack10.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::SpecifierQualifier::TypeSpecifier(type_specifier) };
        __data_stack.__stack8.push(__res);
        Ok(true)
    }
    ///type_name -> specifier_qualifier+ abstract_declarator?
    #[inline]
    fn reduce_type_name_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack29)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack28)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack9);
        let mut specifier_qualifier = __data_stack.__stack28.pop().unwrap();
        let mut abstract_declarator = __data_stack.__stack29.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            declarator::Typename {
                specs: specifier_qualifier,
                declarator: abstract_declarator.map(Box::new),
            }
        };
        __data_stack.__stack9.push(__res);
        Ok(true)
    }
    ///type_specifier -> void_
    #[inline]
    fn reduce_type_specifier_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeSpecifier::Void };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///type_specifier -> char_
    #[inline]
    fn reduce_type_specifier_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeSpecifier::Char };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///type_specifier -> short_
    #[inline]
    fn reduce_type_specifier_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeSpecifier::Short };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///type_specifier -> int_
    #[inline]
    fn reduce_type_specifier_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeSpecifier::Int };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///type_specifier -> long_
    #[inline]
    fn reduce_type_specifier_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeSpecifier::Long };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///type_specifier -> float_
    #[inline]
    fn reduce_type_specifier_5(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeSpecifier::Float };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///type_specifier -> double_
    #[inline]
    fn reduce_type_specifier_6(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeSpecifier::Double };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///type_specifier -> signed
    #[inline]
    fn reduce_type_specifier_7(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeSpecifier::Signed };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///type_specifier -> unsigned
    #[inline]
    fn reduce_type_specifier_8(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeSpecifier::Unsigned };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///type_specifier -> struct_or_union_specifier
    #[inline]
    fn reduce_type_specifier_9(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack19)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        let mut struct_or_union_specifier = __data_stack.__stack19.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            declarator::TypeSpecifier::StructOrUnion(struct_or_union_specifier)
        };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///type_specifier -> enum_specifier
    #[inline]
    fn reduce_type_specifier_10(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack20)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack10);
        let mut enum_specifier = __data_stack.__stack20.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::TypeSpecifier::Enum(enum_specifier) };
        __data_stack.__stack10.push(__res);
        Ok(true)
    }
    ///storage_class_specifier -> typedef
    #[inline]
    fn reduce_storage_class_specifier_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack11);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::StorageClassSpecifier::Typedef };
        __data_stack.__stack11.push(__res);
        Ok(true)
    }
    ///storage_class_specifier -> extern_
    #[inline]
    fn reduce_storage_class_specifier_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack11);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::StorageClassSpecifier::Extern };
        __data_stack.__stack11.push(__res);
        Ok(true)
    }
    ///storage_class_specifier -> static_
    #[inline]
    fn reduce_storage_class_specifier_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack11);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::StorageClassSpecifier::Static };
        __data_stack.__stack11.push(__res);
        Ok(true)
    }
    ///storage_class_specifier -> auto
    #[inline]
    fn reduce_storage_class_specifier_3(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack11);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::StorageClassSpecifier::Auto };
        __data_stack.__stack11.push(__res);
        Ok(true)
    }
    ///storage_class_specifier -> register
    #[inline]
    fn reduce_storage_class_specifier_4(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack11);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::StorageClassSpecifier::Register };
        __data_stack.__stack11.push(__res);
        Ok(true)
    }
    ///declaration_specifier -> storage_class_specifier
    #[inline]
    fn reduce_declaration_specifier_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack11)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack12);
        let mut storage_class_specifier = __data_stack.__stack11.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            declarator::DeclarationSpecifier::StorageClassSpecifier(
                storage_class_specifier,
            )
        };
        __data_stack.__stack12.push(__res);
        Ok(true)
    }
    ///declaration_specifier -> type_specifier
    #[inline]
    fn reduce_declaration_specifier_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack10)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack12);
        let mut type_specifier = __data_stack.__stack10.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::DeclarationSpecifier::TypeSpecifier(type_specifier) };
        __data_stack.__stack12.push(__res);
        Ok(true)
    }
    ///declaration_specifier -> type_qualifier
    #[inline]
    fn reduce_declaration_specifier_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack6)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack12);
        let mut type_qualifier = __data_stack.__stack6.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { declarator::DeclarationSpecifier::TypeQualifier(type_qualifier) };
        __data_stack.__stack12.push(__res);
        Ok(true)
    }
    ///parameter_declaration -> declaration_specifier+ declarator
    #[inline]
    fn reduce_parameter_declaration_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack7)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack26)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack13);
        let mut declaration_specifier = __data_stack.__stack26.pop().unwrap();
        let mut declarator = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            declarator::ParameterDeclaration {
                specs: declaration_specifier,
                declarator: Some(Box::new(declarator)),
            }
        };
        __data_stack.__stack13.push(__res);
        Ok(true)
    }
    ///parameter_declaration -> declaration_specifier+ abstract_declarator
    #[inline]
    fn reduce_parameter_declaration_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack7)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack26)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack13);
        let mut declaration_specifier = __data_stack.__stack26.pop().unwrap();
        let mut abstract_declarator = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            declarator::ParameterDeclaration {
                specs: declaration_specifier,
                declarator: Some(Box::new(abstract_declarator)),
            }
        };
        __data_stack.__stack13.push(__res);
        Ok(true)
    }
    ///parameter_declaration -> declaration_specifier+
    #[inline]
    fn reduce_parameter_declaration_2(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack26)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack13);
        let mut declaration_specifier = __data_stack.__stack26.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            declarator::ParameterDeclaration {
                specs: declaration_specifier,
                declarator: None,
            }
        };
        __data_stack.__stack13.push(__res);
        Ok(true)
    }
    ///parameter_list -> parameter_declaration
    #[inline]
    fn reduce_parameter_list_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack13)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack14);
        let mut parameter_declaration = __data_stack.__stack13.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![parameter_declaration] };
        __data_stack.__stack14.push(__res);
        Ok(true)
    }
    ///parameter_list -> parameter_list comma parameter_declaration
    #[inline]
    fn reduce_parameter_list_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack13)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack14)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut parameter_declaration = __data_stack.__stack13.pop().unwrap();
        let mut parameter_list = __data_stack.__stack14.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            parameter_list.push(parameter_declaration);
            parameter_list
        };
        __data_stack.__stack14.push(__res);
        Ok(true)
    }
    ///parameter_type_list -> parameter_list
    #[inline]
    fn reduce_parameter_type_list_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack14)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack15);
        let mut parameter_list = __data_stack.__stack14.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            declarator::ParameterList {
                params: parameter_list,
                variadic: false,
            }
        };
        __data_stack.__stack15.push(__res);
        Ok(true)
    }
    ///parameter_type_list -> parameter_list comma ellipsis
    #[inline]
    fn reduce_parameter_type_list_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack14)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack15);
        let mut parameter_list = __data_stack.__stack14.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            declarator::ParameterList {
                params: parameter_list,
                variadic: true,
            }
        };
        __data_stack.__stack15.push(__res);
        Ok(true)
    }
    ///struct_or_union -> struct_
    #[inline]
    fn reduce_struct_or_union_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack16);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { true };
        __data_stack.__stack16.push(__res);
        Ok(true)
    }
    ///struct_or_union -> union_
    #[inline]
    fn reduce_struct_or_union_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack16);
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { false };
        __data_stack.__stack16.push(__res);
        Ok(true)
    }
    ///struct_declarator_list -> struct_declarator
    #[inline]
    fn reduce_struct_declarator_list_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack17);
        let mut struct_declarator = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![struct_declarator] };
        __data_stack.__stack17.push(__res);
        Ok(true)
    }
    ///struct_declarator_list -> struct_declarator_list comma struct_declarator
    #[inline]
    fn reduce_struct_declarator_list_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack7)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack17)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut struct_declarator_list = __data_stack.__stack17.pop().unwrap();
        let mut struct_declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            struct_declarator_list.push(struct_declarator);
            struct_declarator_list
        };
        __data_stack.__stack17.push(__res);
        Ok(true)
    }
    ///struct_declaration -> specifier_qualifier+ struct_declarator_list semicolon
    #[inline]
    fn reduce_struct_declaration_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack17)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack28)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack18);
        let mut struct_declarator_list = __data_stack.__stack17.pop().unwrap();
        let mut specifier_qualifier = __data_stack.__stack28.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            declarator::StructDeclaration {
                specs: specifier_qualifier,
                declarators: struct_declarator_list,
            }
        };
        __data_stack.__stack18.push(__res);
        Ok(true)
    }
    ///struct_or_union_specifier -> struct_or_union ident? lbrace struct_declaration* rbrace
    #[inline]
    fn reduce_struct_or_union_specifier_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack31)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__stack30)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                translation_unitTags::__stack16)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 5usize);
        __data_stack.__tags.push(translation_unitTags::__stack19);
        let mut struct_or_union = __data_stack.__stack16.pop().unwrap();
        let mut ident = __data_stack.__stack30.pop().unwrap();
        let mut struct_declaration = __data_stack.__stack31.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 2usize);
        __location_stack.truncate(__location_stack.len() - 5usize);
        let __res = {
            let name = ident
                .map(|name| {
                    let Token::Identifier(name) = name else { unreachable!() };
                    name
                });
            declarator::StructOrUnionSpecifier {
                is_struct: struct_or_union,
                name,
                decls: Some(struct_declaration),
            }
        };
        __data_stack.__stack19.push(__res);
        Ok(true)
    }
    ///struct_or_union_specifier -> struct_or_union ident
    #[inline]
    fn reduce_struct_or_union_specifier_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack16)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack19);
        let mut struct_or_union = __data_stack.__stack16.pop().unwrap();
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            let Token::Identifier(name) = ident else { unreachable!() };
            declarator::StructOrUnionSpecifier {
                is_struct: struct_or_union,
                name: Some(name),
                decls: None,
            }
        };
        __data_stack.__stack19.push(__res);
        Ok(true)
    }
    ///enum_specifier -> enum_ ident? lbrace enumerator_list rbrace
    #[inline]
    fn reduce_enum_specifier_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack21)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 3usize) == Some(&
                translation_unitTags::__stack30)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 4usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 5usize);
        __data_stack.__tags.push(translation_unitTags::__stack20);
        let mut enumerator_list = __data_stack.__stack21.pop().unwrap();
        let mut ident = __data_stack.__stack30.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 3usize);
        __location_stack.truncate(__location_stack.len() - 5usize);
        let __res = {
            let name = ident
                .map(|name| {
                    let Token::Identifier(name) = name else { unreachable!() };
                    name
                });
            declarator::EnumSpecifier {
                name,
                enumerators: Some(enumerator_list),
            }
        };
        __data_stack.__stack20.push(__res);
        Ok(true)
    }
    ///enum_specifier -> enum_ ident
    #[inline]
    fn reduce_enum_specifier_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        __data_stack.__tags.push(translation_unitTags::__stack20);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            let Token::Identifier(name) = ident else { unreachable!() };
            declarator::EnumSpecifier {
                name: Some(name),
                enumerators: None,
            }
        };
        __data_stack.__stack20.push(__res);
        Ok(true)
    }
    ///enumerator_list -> enumerator
    #[inline]
    fn reduce_enumerator_list_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack22)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack21);
        let mut enumerator = __data_stack.__stack22.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![enumerator] };
        __data_stack.__stack21.push(__res);
        Ok(true)
    }
    ///enumerator_list -> enumerator_list comma enumerator
    #[inline]
    fn reduce_enumerator_list_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack22)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack21)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut enumerator_list = __data_stack.__stack21.pop().unwrap();
        let mut enumerator = __data_stack.__stack22.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            enumerator_list.push(enumerator);
            enumerator_list
        };
        __data_stack.__stack21.push(__res);
        Ok(true)
    }
    ///enumerator -> ident
    #[inline]
    fn reduce_enumerator_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack22);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            let Token::Identifier(name) = ident else { unreachable!() };
            declarator::Enumerator {
                name,
                value: None,
            }
        };
        __data_stack.__stack22.push(__res);
        Ok(true)
    }
    ///enumerator -> ident assign constant_expression
    #[inline]
    fn reduce_enumerator_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack22);
        let mut constant_expression = __data_stack.__stack2.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        let mut ident = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            let Token::Identifier(name) = ident else { unreachable!() };
            declarator::Enumerator {
                name,
                value: Some(constant_expression),
            }
        };
        __data_stack.__stack22.push(__res);
        Ok(true)
    }
    ///init_declarator -> declarator
    #[inline]
    fn reduce_init_declarator_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack23);
        let mut declarator = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = {
            declarator::DeclInit {
                declarator: Box::new(declarator),
                initializer: None,
            }
        };
        __data_stack.__stack23.push(__res);
        Ok(true)
    }
    ///init_declarator -> declarator assign initializer
    #[inline]
    fn reduce_init_declarator_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack2)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 3usize);
        __data_stack.__tags.push(translation_unitTags::__stack23);
        let mut initializer = __data_stack.__stack2.pop().unwrap();
        let mut declarator = __data_stack.__stack7.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            declarator::DeclInit {
                declarator: Box::new(declarator),
                initializer: Some(initializer),
            }
        };
        __data_stack.__stack23.push(__res);
        Ok(true)
    }
    ///init_declarator_list -> init_declarator
    #[inline]
    fn reduce_init_declarator_list_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack23)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack24);
        let mut init_declarator = __data_stack.__stack23.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![init_declarator] };
        __data_stack.__stack24.push(__res);
        Ok(true)
    }
    ///init_declarator_list -> init_declarator_list comma init_declarator
    #[inline]
    fn reduce_init_declarator_list_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack23)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__terminals)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 2usize) == Some(&
                translation_unitTags::__stack24)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 2usize);
        let mut init_declarator = __data_stack.__stack23.pop().unwrap();
        let mut init_declarator_list = __data_stack.__stack24.pop().unwrap();
        __data_stack.__terminals.truncate(__data_stack.__terminals.len() - 1usize);
        __location_stack.truncate(__location_stack.len() - 3usize);
        let __res = {
            init_declarator_list.push(init_declarator);
            init_declarator_list
        };
        __data_stack.__stack24.push(__res);
        Ok(true)
    }
    ///statement_or_declaration+ -> statement_or_declaration
    #[inline]
    fn reduce__statement_or_declarationPlus58_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack25);
        let mut A = __data_stack.__stack4.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack25.push(__res);
        Ok(true)
    }
    ///statement_or_declaration+ -> statement_or_declaration+ statement_or_declaration
    #[inline]
    fn reduce__statement_or_declarationPlus58_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack25)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Ap = __data_stack.__stack25.pop().unwrap();
        let mut A = __data_stack.__stack4.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack25.push(__res);
        Ok(true)
    }
    ///statement_or_declaration* -> statement_or_declaration+
    #[inline]
    fn reduce__statement_or_declarationStar59_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack25)
            );
        }
        let mut __token0 = __data_stack.__stack25.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = __token0;
        __data_stack.__stack25.push(__res);
        Ok(true)
    }
    ///statement_or_declaration* ->
    #[inline]
    fn reduce__statement_or_declarationStar59_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(translation_unitTags::__stack25);
        let __res = { vec![] };
        __data_stack.__stack25.push(__res);
        Ok(true)
    }
    ///declaration_specifier+ -> declaration_specifier
    #[inline]
    fn reduce__declaration_specifierPlus60_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack12)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack26);
        let mut A = __data_stack.__stack12.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack26.push(__res);
        Ok(true)
    }
    ///declaration_specifier+ -> declaration_specifier+ declaration_specifier
    #[inline]
    fn reduce__declaration_specifierPlus60_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack12)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack26)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut A = __data_stack.__stack12.pop().unwrap();
        let mut Ap = __data_stack.__stack26.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack26.push(__res);
        Ok(true)
    }
    ///external_declaration+ -> external_declaration
    #[inline]
    fn reduce__external_declarationPlus61_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack25);
        let mut A = __data_stack.__stack4.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack25.push(__res);
        Ok(true)
    }
    ///external_declaration+ -> external_declaration+ external_declaration
    #[inline]
    fn reduce__external_declarationPlus61_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack4)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack25)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Ap = __data_stack.__stack25.pop().unwrap();
        let mut A = __data_stack.__stack4.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack25.push(__res);
        Ok(true)
    }
    ///external_declaration* -> external_declaration+
    #[inline]
    fn reduce__external_declarationStar62_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack25)
            );
        }
        let mut __token0 = __data_stack.__stack25.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = __token0;
        __data_stack.__stack25.push(__res);
        Ok(true)
    }
    ///external_declaration* ->
    #[inline]
    fn reduce__external_declarationStar62_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(translation_unitTags::__stack25);
        let __res = { vec![] };
        __data_stack.__stack25.push(__res);
        Ok(true)
    }
    ///type_qualifier+ -> type_qualifier
    #[inline]
    fn reduce__type_qualifierPlus63_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack6)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack27);
        let mut A = __data_stack.__stack6.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack27.push(__res);
        Ok(true)
    }
    ///type_qualifier+ -> type_qualifier+ type_qualifier
    #[inline]
    fn reduce__type_qualifierPlus63_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack6)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack27)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Ap = __data_stack.__stack27.pop().unwrap();
        let mut A = __data_stack.__stack6.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack27.push(__res);
        Ok(true)
    }
    ///type_qualifier* -> type_qualifier+
    #[inline]
    fn reduce__type_qualifierStar64_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack27)
            );
        }
        let mut __token0 = __data_stack.__stack27.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = __token0;
        __data_stack.__stack27.push(__res);
        Ok(true)
    }
    ///type_qualifier* ->
    #[inline]
    fn reduce__type_qualifierStar64_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(translation_unitTags::__stack27);
        let __res = { vec![] };
        __data_stack.__stack27.push(__res);
        Ok(true)
    }
    ///specifier_qualifier+ -> specifier_qualifier
    #[inline]
    fn reduce__specifier_qualifierPlus65_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack8)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack28);
        let mut A = __data_stack.__stack8.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack28.push(__res);
        Ok(true)
    }
    ///specifier_qualifier+ -> specifier_qualifier+ specifier_qualifier
    #[inline]
    fn reduce__specifier_qualifierPlus65_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack8)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack28)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut Ap = __data_stack.__stack28.pop().unwrap();
        let mut A = __data_stack.__stack8.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack28.push(__res);
        Ok(true)
    }
    ///abstract_declarator? -> abstract_declarator
    #[inline]
    fn reduce__abstract_declaratorQuestion66_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack7)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack29);
        let mut A = __data_stack.__stack7.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = Some(A);
        __data_stack.__stack29.push(__res);
        Ok(true)
    }
    ///abstract_declarator? ->
    #[inline]
    fn reduce__abstract_declaratorQuestion66_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(translation_unitTags::__stack29);
        let __res = { None };
        __data_stack.__stack29.push(__res);
        Ok(true)
    }
    ///ident? -> ident
    #[inline]
    fn reduce__identQuestion67_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__terminals)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack30);
        let mut A = __data_stack.__terminals.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = Some(A);
        __data_stack.__stack30.push(__res);
        Ok(true)
    }
    ///ident? ->
    #[inline]
    fn reduce__identQuestion67_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(translation_unitTags::__stack30);
        let __res = { None };
        __data_stack.__stack30.push(__res);
        Ok(true)
    }
    ///struct_declaration+ -> struct_declaration
    #[inline]
    fn reduce__struct_declarationPlus68_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack18)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        __data_stack.__tags.push(translation_unitTags::__stack31);
        let mut A = __data_stack.__stack18.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = { vec![A] };
        __data_stack.__stack31.push(__res);
        Ok(true)
    }
    ///struct_declaration+ -> struct_declaration+ struct_declaration
    #[inline]
    fn reduce__struct_declarationPlus68_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack18)
            );
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 1usize) == Some(&
                translation_unitTags::__stack31)
            );
        }
        __data_stack.__tags.truncate(__data_stack.__tags.len() - 1usize);
        let mut A = __data_stack.__stack18.pop().unwrap();
        let mut Ap = __data_stack.__stack31.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 2usize);
        let __res = {
            Ap.push(A);
            Ap
        };
        __data_stack.__stack31.push(__res);
        Ok(true)
    }
    ///struct_declaration* -> struct_declaration+
    #[inline]
    fn reduce__struct_declarationStar69_0(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)]
        {
            debug_assert!(
                __data_stack.__tags.get(__data_stack.__tags.len() - 1 - 0usize) == Some(&
                translation_unitTags::__stack31)
            );
        }
        let mut __token0 = __data_stack.__stack31.pop().unwrap();
        __location_stack.truncate(__location_stack.len() - 1usize);
        let __res = __token0;
        __data_stack.__stack31.push(__res);
        Ok(true)
    }
    ///struct_declaration* ->
    #[inline]
    fn reduce__struct_declarationStar69_1(
        __data_stack: &mut Self,
        __location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<bool, ::rusty_lr::DefaultReduceActionError> {
        #[cfg(debug_assertions)] {}
        __data_stack.__tags.push(translation_unitTags::__stack31);
        let __res = { vec![] };
        __data_stack.__stack31.push(__res);
        Ok(true)
    }
}
#[allow(
    unused_braces,
    unused_parens,
    non_snake_case,
    non_camel_case_types,
    unused_variables
)]
impl ::rusty_lr::parser::data_stack::DataStack for translation_unitDataStack {
    type Term = Token;
    type NonTerm = translation_unitNonTerminals;
    type ReduceActionError = ::rusty_lr::DefaultReduceActionError;
    type UserData = ();
    type StartType = statement::TranslationUnit;
    type Location = ::rusty_lr::DefaultLocation;
    fn pop_start(&mut self) -> Option<Self::StartType> {
        let tag = self.__tags.pop();
        debug_assert!(tag == Some(translation_unitTags::__stack5));
        self.__stack5.pop()
    }
    fn pop(&mut self) {
        match self.__tags.pop().unwrap() {
            translation_unitTags::__terminals => {
                self.__terminals.pop();
            }
            translation_unitTags::__stack2 => {
                self.__stack2.pop();
            }
            translation_unitTags::__stack3 => {
                self.__stack3.pop();
            }
            translation_unitTags::__stack4 => {
                self.__stack4.pop();
            }
            translation_unitTags::__stack5 => {
                self.__stack5.pop();
            }
            translation_unitTags::__stack6 => {
                self.__stack6.pop();
            }
            translation_unitTags::__stack7 => {
                self.__stack7.pop();
            }
            translation_unitTags::__stack8 => {
                self.__stack8.pop();
            }
            translation_unitTags::__stack9 => {
                self.__stack9.pop();
            }
            translation_unitTags::__stack10 => {
                self.__stack10.pop();
            }
            translation_unitTags::__stack11 => {
                self.__stack11.pop();
            }
            translation_unitTags::__stack12 => {
                self.__stack12.pop();
            }
            translation_unitTags::__stack13 => {
                self.__stack13.pop();
            }
            translation_unitTags::__stack14 => {
                self.__stack14.pop();
            }
            translation_unitTags::__stack15 => {
                self.__stack15.pop();
            }
            translation_unitTags::__stack16 => {
                self.__stack16.pop();
            }
            translation_unitTags::__stack17 => {
                self.__stack17.pop();
            }
            translation_unitTags::__stack18 => {
                self.__stack18.pop();
            }
            translation_unitTags::__stack19 => {
                self.__stack19.pop();
            }
            translation_unitTags::__stack20 => {
                self.__stack20.pop();
            }
            translation_unitTags::__stack21 => {
                self.__stack21.pop();
            }
            translation_unitTags::__stack22 => {
                self.__stack22.pop();
            }
            translation_unitTags::__stack23 => {
                self.__stack23.pop();
            }
            translation_unitTags::__stack24 => {
                self.__stack24.pop();
            }
            translation_unitTags::__stack25 => {
                self.__stack25.pop();
            }
            translation_unitTags::__stack26 => {
                self.__stack26.pop();
            }
            translation_unitTags::__stack27 => {
                self.__stack27.pop();
            }
            translation_unitTags::__stack28 => {
                self.__stack28.pop();
            }
            translation_unitTags::__stack29 => {
                self.__stack29.pop();
            }
            translation_unitTags::__stack30 => {
                self.__stack30.pop();
            }
            translation_unitTags::__stack31 => {
                self.__stack31.pop();
            }
            _ => {}
        }
    }
    fn push_terminal(&mut self, term: Self::Term) {
        self.__tags.push(translation_unitTags::__terminals);
        self.__terminals.push(term);
    }
    fn push_empty(&mut self) {
        self.__tags.push(translation_unitTags::Empty);
    }
    fn clear(&mut self) {
        self.__tags.clear();
        self.__terminals.clear();
        self.__stack2.clear();
        self.__stack3.clear();
        self.__stack4.clear();
        self.__stack5.clear();
        self.__stack6.clear();
        self.__stack7.clear();
        self.__stack8.clear();
        self.__stack9.clear();
        self.__stack10.clear();
        self.__stack11.clear();
        self.__stack12.clear();
        self.__stack13.clear();
        self.__stack14.clear();
        self.__stack15.clear();
        self.__stack16.clear();
        self.__stack17.clear();
        self.__stack18.clear();
        self.__stack19.clear();
        self.__stack20.clear();
        self.__stack21.clear();
        self.__stack22.clear();
        self.__stack23.clear();
        self.__stack24.clear();
        self.__stack25.clear();
        self.__stack26.clear();
        self.__stack27.clear();
        self.__stack28.clear();
        self.__stack29.clear();
        self.__stack30.clear();
        self.__stack31.clear();
    }
    fn reserve(&mut self, additional: usize) {
        self.__tags.reserve(additional);
    }
    fn split_off(&mut self, at: usize) -> Self {
        let __other_tag_stack = self.__tags.split_off(at);
        let mut __counts: [u8; 31usize + 1] = [0; 31usize + 1];
        for &tag in &__other_tag_stack {
            __counts[tag as usize] += 1;
        }
        let __other___terminals = self
            .__terminals
            .split_off(self.__terminals.len() - (__counts[0usize] as usize));
        let __other___stack2 = self
            .__stack2
            .split_off(self.__stack2.len() - (__counts[1usize] as usize));
        let __other___stack3 = self
            .__stack3
            .split_off(self.__stack3.len() - (__counts[2usize] as usize));
        let __other___stack4 = self
            .__stack4
            .split_off(self.__stack4.len() - (__counts[3usize] as usize));
        let __other___stack5 = self
            .__stack5
            .split_off(self.__stack5.len() - (__counts[4usize] as usize));
        let __other___stack6 = self
            .__stack6
            .split_off(self.__stack6.len() - (__counts[5usize] as usize));
        let __other___stack7 = self
            .__stack7
            .split_off(self.__stack7.len() - (__counts[6usize] as usize));
        let __other___stack8 = self
            .__stack8
            .split_off(self.__stack8.len() - (__counts[7usize] as usize));
        let __other___stack9 = self
            .__stack9
            .split_off(self.__stack9.len() - (__counts[8usize] as usize));
        let __other___stack10 = self
            .__stack10
            .split_off(self.__stack10.len() - (__counts[9usize] as usize));
        let __other___stack11 = self
            .__stack11
            .split_off(self.__stack11.len() - (__counts[10usize] as usize));
        let __other___stack12 = self
            .__stack12
            .split_off(self.__stack12.len() - (__counts[11usize] as usize));
        let __other___stack13 = self
            .__stack13
            .split_off(self.__stack13.len() - (__counts[12usize] as usize));
        let __other___stack14 = self
            .__stack14
            .split_off(self.__stack14.len() - (__counts[13usize] as usize));
        let __other___stack15 = self
            .__stack15
            .split_off(self.__stack15.len() - (__counts[14usize] as usize));
        let __other___stack16 = self
            .__stack16
            .split_off(self.__stack16.len() - (__counts[15usize] as usize));
        let __other___stack17 = self
            .__stack17
            .split_off(self.__stack17.len() - (__counts[16usize] as usize));
        let __other___stack18 = self
            .__stack18
            .split_off(self.__stack18.len() - (__counts[17usize] as usize));
        let __other___stack19 = self
            .__stack19
            .split_off(self.__stack19.len() - (__counts[18usize] as usize));
        let __other___stack20 = self
            .__stack20
            .split_off(self.__stack20.len() - (__counts[19usize] as usize));
        let __other___stack21 = self
            .__stack21
            .split_off(self.__stack21.len() - (__counts[20usize] as usize));
        let __other___stack22 = self
            .__stack22
            .split_off(self.__stack22.len() - (__counts[21usize] as usize));
        let __other___stack23 = self
            .__stack23
            .split_off(self.__stack23.len() - (__counts[22usize] as usize));
        let __other___stack24 = self
            .__stack24
            .split_off(self.__stack24.len() - (__counts[23usize] as usize));
        let __other___stack25 = self
            .__stack25
            .split_off(self.__stack25.len() - (__counts[24usize] as usize));
        let __other___stack26 = self
            .__stack26
            .split_off(self.__stack26.len() - (__counts[25usize] as usize));
        let __other___stack27 = self
            .__stack27
            .split_off(self.__stack27.len() - (__counts[26usize] as usize));
        let __other___stack28 = self
            .__stack28
            .split_off(self.__stack28.len() - (__counts[27usize] as usize));
        let __other___stack29 = self
            .__stack29
            .split_off(self.__stack29.len() - (__counts[28usize] as usize));
        let __other___stack30 = self
            .__stack30
            .split_off(self.__stack30.len() - (__counts[29usize] as usize));
        let __other___stack31 = self
            .__stack31
            .split_off(self.__stack31.len() - (__counts[30usize] as usize));
        Self {
            __tags: __other_tag_stack,
            __terminals: __other___terminals,
            __stack2: __other___stack2,
            __stack3: __other___stack3,
            __stack4: __other___stack4,
            __stack5: __other___stack5,
            __stack6: __other___stack6,
            __stack7: __other___stack7,
            __stack8: __other___stack8,
            __stack9: __other___stack9,
            __stack10: __other___stack10,
            __stack11: __other___stack11,
            __stack12: __other___stack12,
            __stack13: __other___stack13,
            __stack14: __other___stack14,
            __stack15: __other___stack15,
            __stack16: __other___stack16,
            __stack17: __other___stack17,
            __stack18: __other___stack18,
            __stack19: __other___stack19,
            __stack20: __other___stack20,
            __stack21: __other___stack21,
            __stack22: __other___stack22,
            __stack23: __other___stack23,
            __stack24: __other___stack24,
            __stack25: __other___stack25,
            __stack26: __other___stack26,
            __stack27: __other___stack27,
            __stack28: __other___stack28,
            __stack29: __other___stack29,
            __stack30: __other___stack30,
            __stack31: __other___stack31,
        }
    }
    fn append(&mut self, other: &mut Self) {
        self.__tags.append(&mut other.__tags);
        self.__terminals.append(&mut other.__terminals);
        self.__stack2.append(&mut other.__stack2);
        self.__stack3.append(&mut other.__stack3);
        self.__stack4.append(&mut other.__stack4);
        self.__stack5.append(&mut other.__stack5);
        self.__stack6.append(&mut other.__stack6);
        self.__stack7.append(&mut other.__stack7);
        self.__stack8.append(&mut other.__stack8);
        self.__stack9.append(&mut other.__stack9);
        self.__stack10.append(&mut other.__stack10);
        self.__stack11.append(&mut other.__stack11);
        self.__stack12.append(&mut other.__stack12);
        self.__stack13.append(&mut other.__stack13);
        self.__stack14.append(&mut other.__stack14);
        self.__stack15.append(&mut other.__stack15);
        self.__stack16.append(&mut other.__stack16);
        self.__stack17.append(&mut other.__stack17);
        self.__stack18.append(&mut other.__stack18);
        self.__stack19.append(&mut other.__stack19);
        self.__stack20.append(&mut other.__stack20);
        self.__stack21.append(&mut other.__stack21);
        self.__stack22.append(&mut other.__stack22);
        self.__stack23.append(&mut other.__stack23);
        self.__stack24.append(&mut other.__stack24);
        self.__stack25.append(&mut other.__stack25);
        self.__stack26.append(&mut other.__stack26);
        self.__stack27.append(&mut other.__stack27);
        self.__stack28.append(&mut other.__stack28);
        self.__stack29.append(&mut other.__stack29);
        self.__stack30.append(&mut other.__stack30);
        self.__stack31.append(&mut other.__stack31);
    }
    fn reduce_action(
        data_stack: &mut Self,
        location_stack: &mut Vec<::rusty_lr::DefaultLocation>,
        rule_index: usize,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Self::Term>,
        user_data: &mut Self::UserData,
        location0: &mut Self::Location,
    ) -> Result<bool, Self::ReduceActionError> {
        match rule_index {
            0usize => {
                Self::reduce_Constant_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            1usize => {
                Self::reduce_Constant_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            2usize => {
                Self::reduce_Constant_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            3usize => {
                Self::reduce_Constant_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            4usize => {
                Self::reduce_Constant_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            5usize => {
                Self::reduce_Constant_5(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            6usize => {
                Self::reduce_Constant_6(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            7usize => {
                Self::reduce_primary_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            9usize => {
                Self::reduce_primary_expression_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            10usize => {
                Self::reduce_primary_expression_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            12usize => {
                Self::reduce_postfix_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            13usize => {
                Self::reduce_postfix_expression_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            14usize => {
                Self::reduce_postfix_expression_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            15usize => {
                Self::reduce_postfix_expression_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            16usize => {
                Self::reduce_postfix_expression_5(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            17usize => {
                Self::reduce_postfix_expression_6(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            18usize => {
                Self::reduce_postfix_expression_7(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            19usize => {
                Self::reduce_argument_expression_list_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            20usize => {
                Self::reduce_argument_expression_list_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            21usize => {
                Self::reduce_unary_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            22usize => {
                Self::reduce_unary_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            23usize => {
                Self::reduce_unary_expression_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            24usize => {
                Self::reduce_unary_expression_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            25usize => {
                Self::reduce_unary_expression_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            26usize => {
                Self::reduce_unary_expression_5(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            27usize => {
                Self::reduce_unary_expression_6(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            28usize => {
                Self::reduce_unary_expression_7(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            29usize => {
                Self::reduce_unary_expression_8(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            30usize => {
                Self::reduce_unary_expression_9(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            31usize => {
                Self::reduce_unary_expression_10(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            32usize => {
                Self::reduce_cast_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            33usize => {
                Self::reduce_cast_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            35usize => {
                Self::reduce_multiplicative_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            36usize => {
                Self::reduce_multiplicative_expression_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            37usize => {
                Self::reduce_multiplicative_expression_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            38usize => {
                Self::reduce_additive_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            39usize => {
                Self::reduce_additive_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            40usize => {
                Self::reduce_additive_expression_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            41usize => {
                Self::reduce_shift_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            42usize => {
                Self::reduce_shift_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            43usize => {
                Self::reduce_shift_expression_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            44usize => {
                Self::reduce_relational_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            45usize => {
                Self::reduce_relational_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            46usize => {
                Self::reduce_relational_expression_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            47usize => {
                Self::reduce_relational_expression_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            48usize => {
                Self::reduce_relational_expression_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            49usize => {
                Self::reduce_equality_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            50usize => {
                Self::reduce_equality_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            51usize => {
                Self::reduce_equality_expression_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            52usize => {
                Self::reduce_and_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            53usize => {
                Self::reduce_and_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            54usize => {
                Self::reduce_exclusive_or_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            55usize => {
                Self::reduce_exclusive_or_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            56usize => {
                Self::reduce_inclusive_or_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            57usize => {
                Self::reduce_inclusive_or_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            58usize => {
                Self::reduce_logical_and_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            59usize => {
                Self::reduce_logical_and_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            60usize => {
                Self::reduce_logical_or_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            61usize => {
                Self::reduce_logical_or_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            62usize => {
                Self::reduce_conditional_expression_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            63usize => {
                Self::reduce_conditional_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            65usize => {
                Self::reduce_assignment_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            66usize => {
                Self::reduce_assignment_expression_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            67usize => {
                Self::reduce_assignment_expression_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            68usize => {
                Self::reduce_assignment_expression_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            69usize => {
                Self::reduce_assignment_expression_5(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            70usize => {
                Self::reduce_assignment_expression_6(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            71usize => {
                Self::reduce_assignment_expression_7(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            72usize => {
                Self::reduce_assignment_expression_8(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            73usize => {
                Self::reduce_assignment_expression_9(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            74usize => {
                Self::reduce_assignment_expression_10(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            75usize => {
                Self::reduce_assignment_expression_11(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            77usize => {
                Self::reduce_expression_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            80usize => {
                Self::reduce_initializer_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            81usize => {
                Self::reduce_initializer_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            82usize => {
                Self::reduce_initializer_list_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            83usize => {
                Self::reduce_initializer_list_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            84usize => {
                Self::reduce_labeled_statement_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            85usize => {
                Self::reduce_labeled_statement_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            86usize => {
                Self::reduce_labeled_statement_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            89usize => {
                Self::reduce_compound_statement_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            90usize => {
                Self::reduce_expression_statement_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            91usize => {
                Self::reduce_expression_statement_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            92usize => {
                Self::reduce_selection_statement_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            93usize => {
                Self::reduce_selection_statement_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            94usize => {
                Self::reduce_selection_statement_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            97usize => {
                Self::reduce_iteration_statement_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            98usize => {
                Self::reduce_iteration_statement_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            99usize => {
                Self::reduce_iteration_statement_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            100usize => {
                Self::reduce_iteration_statement_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            101usize => {
                Self::reduce_jump_statement_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            102usize => {
                Self::reduce_jump_statement_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            103usize => {
                Self::reduce_jump_statement_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            104usize => {
                Self::reduce_jump_statement_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            105usize => {
                Self::reduce_jump_statement_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            106usize => {
                Self::reduce_declaration_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            107usize => {
                Self::reduce_declaration_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            108usize => {
                Self::reduce_function_definition_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            109usize => {
                Self::reduce_function_definition_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            118usize => {
                Self::reduce_translation_unit_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            119usize => {
                Self::reduce_type_qualifier_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            120usize => {
                Self::reduce_type_qualifier_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            121usize => {
                Self::reduce_declarator_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            122usize => {
                Self::reduce_declarator_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            123usize => {
                Self::reduce_direct_declarator_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            124usize => {
                Self::reduce_direct_declarator_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            125usize => {
                Self::reduce_direct_declarator_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            126usize => {
                Self::reduce_direct_declarator_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            127usize => {
                Self::reduce_direct_declarator_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            128usize => {
                Self::reduce_direct_declarator_5(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            129usize => {
                Self::reduce_abstract_declarator_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            130usize => {
                Self::reduce_abstract_declarator_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            131usize => {
                Self::reduce_abstract_declarator_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            132usize => {
                Self::reduce_direct_abstract_declarator_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            133usize => {
                Self::reduce_direct_abstract_declarator_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            134usize => {
                Self::reduce_direct_abstract_declarator_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            135usize => {
                Self::reduce_direct_abstract_declarator_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            136usize => {
                Self::reduce_direct_abstract_declarator_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            137usize => {
                Self::reduce_direct_abstract_declarator_5(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            138usize => {
                Self::reduce_direct_abstract_declarator_6(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            139usize => {
                Self::reduce_direct_abstract_declarator_7(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            140usize => {
                Self::reduce_direct_abstract_declarator_8(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            141usize => {
                Self::reduce_specifier_qualifier_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            142usize => {
                Self::reduce_specifier_qualifier_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            143usize => {
                Self::reduce_type_name_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            144usize => {
                Self::reduce_type_specifier_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            145usize => {
                Self::reduce_type_specifier_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            146usize => {
                Self::reduce_type_specifier_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            147usize => {
                Self::reduce_type_specifier_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            148usize => {
                Self::reduce_type_specifier_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            149usize => {
                Self::reduce_type_specifier_5(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            150usize => {
                Self::reduce_type_specifier_6(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            151usize => {
                Self::reduce_type_specifier_7(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            152usize => {
                Self::reduce_type_specifier_8(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            153usize => {
                Self::reduce_type_specifier_9(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            154usize => {
                Self::reduce_type_specifier_10(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            155usize => {
                Self::reduce_storage_class_specifier_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            156usize => {
                Self::reduce_storage_class_specifier_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            157usize => {
                Self::reduce_storage_class_specifier_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            158usize => {
                Self::reduce_storage_class_specifier_3(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            159usize => {
                Self::reduce_storage_class_specifier_4(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            160usize => {
                Self::reduce_declaration_specifier_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            161usize => {
                Self::reduce_declaration_specifier_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            162usize => {
                Self::reduce_declaration_specifier_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            163usize => {
                Self::reduce_parameter_declaration_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            164usize => {
                Self::reduce_parameter_declaration_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            165usize => {
                Self::reduce_parameter_declaration_2(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            166usize => {
                Self::reduce_parameter_list_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            167usize => {
                Self::reduce_parameter_list_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            168usize => {
                Self::reduce_parameter_type_list_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            169usize => {
                Self::reduce_parameter_type_list_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            170usize => {
                Self::reduce_struct_or_union_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            171usize => {
                Self::reduce_struct_or_union_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            173usize => {
                Self::reduce_struct_declarator_list_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            174usize => {
                Self::reduce_struct_declarator_list_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            175usize => {
                Self::reduce_struct_declaration_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            176usize => {
                Self::reduce_struct_or_union_specifier_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            177usize => {
                Self::reduce_struct_or_union_specifier_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            178usize => {
                Self::reduce_enum_specifier_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            179usize => {
                Self::reduce_enum_specifier_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            180usize => {
                Self::reduce_enumerator_list_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            181usize => {
                Self::reduce_enumerator_list_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            182usize => {
                Self::reduce_enumerator_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            183usize => {
                Self::reduce_enumerator_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            184usize => {
                Self::reduce_init_declarator_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            185usize => {
                Self::reduce_init_declarator_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            186usize => {
                Self::reduce_init_declarator_list_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            187usize => {
                Self::reduce_init_declarator_list_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            188usize => {
                Self::reduce__statement_or_declarationPlus58_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            189usize => {
                Self::reduce__statement_or_declarationPlus58_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            190usize => {
                Self::reduce__statement_or_declarationStar59_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            191usize => {
                Self::reduce__statement_or_declarationStar59_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            192usize => {
                Self::reduce__declaration_specifierPlus60_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            193usize => {
                Self::reduce__declaration_specifierPlus60_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            194usize => {
                Self::reduce__external_declarationPlus61_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            195usize => {
                Self::reduce__external_declarationPlus61_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            196usize => {
                Self::reduce__external_declarationStar62_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            197usize => {
                Self::reduce__external_declarationStar62_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            198usize => {
                Self::reduce__type_qualifierPlus63_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            199usize => {
                Self::reduce__type_qualifierPlus63_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            200usize => {
                Self::reduce__type_qualifierStar64_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            201usize => {
                Self::reduce__type_qualifierStar64_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            202usize => {
                Self::reduce__specifier_qualifierPlus65_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            203usize => {
                Self::reduce__specifier_qualifierPlus65_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            204usize => {
                Self::reduce__abstract_declaratorQuestion66_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            205usize => {
                Self::reduce__abstract_declaratorQuestion66_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            206usize => {
                Self::reduce__identQuestion67_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            207usize => {
                Self::reduce__identQuestion67_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            208usize => {
                Self::reduce__struct_declarationPlus68_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            209usize => {
                Self::reduce__struct_declarationPlus68_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            210usize => {
                Self::reduce__struct_declarationStar69_0(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            211usize => {
                Self::reduce__struct_declarationStar69_1(
                    data_stack,
                    location_stack,
                    shift,
                    lookahead,
                    user_data,
                    location0,
                )
            }
            _ => {
                unreachable!("Invalid Rule: {}", rule_index);
            }
        }
    }
}
/// A struct that holds the entire parser table and production rules.
#[allow(unused_braces, unused_parens, unused_variables, non_snake_case, unused_mut)]
pub struct translation_unitParser {
    /// production rules
    pub rules: Vec<translation_unitRule>,
    /// states
    pub states: Vec<translation_unitState>,
    /// terminal classes
    pub classes: Vec<Vec<&'static str>>,
}
impl ::rusty_lr::parser::Parser for translation_unitParser {
    type Term = Token;
    type NonTerm = translation_unitNonTerminals;
    type State = translation_unitState;
    type TerminalClassElement = &'static str;
    const ERROR_USED: bool = false;
    fn class_precedence(
        &self,
        class: ::rusty_lr::TerminalSymbol<usize>,
    ) -> ::rusty_lr::parser::Precedence {
        match class {
            ::rusty_lr::TerminalSymbol::Term(class) => {
                #[allow(unreachable_patterns)]
                match class {
                    59 => ::rusty_lr::parser::Precedence::new(0),
                    _ => ::rusty_lr::parser::Precedence::none(),
                }
            }
            ::rusty_lr::TerminalSymbol::Error => ::rusty_lr::parser::Precedence::none(),
            ::rusty_lr::TerminalSymbol::Eof => {
                unreachable!("eof token cannot be used in precedence levels")
            }
        }
    }
    fn precedence_types(&self, level: u8) -> Option<::rusty_lr::rule::ReduceType> {
        #[allow(unreachable_patterns)]
        match level {
            0 => Some(::rusty_lr::rule::ReduceType::Left),
            _ => None,
        }
    }
    fn get_rules(&self) -> &[translation_unitRule] {
        &self.rules
    }
    fn get_states(&self) -> &[translation_unitState] {
        &self.states
    }
    fn get_terminals(
        &self,
        i: usize,
    ) -> Option<impl IntoIterator<Item = Self::TerminalClassElement> + '_> {
        self.classes.get(i).map(|class| class.iter().copied())
    }
    fn to_terminal_class(&self, terminal: &Self::Term) -> usize {
        #[allow(unreachable_patterns)]
        match terminal {
            Token::Identifier(_) => 0,
            Token::LeftParen => 1,
            Token::RightParen => 2,
            Token::StringLiteral(_) => 3,
            Token::ConstantCharacter(_) => 4,
            Token::ConstantInteger(_) => 5,
            Token::ConstantLong(_) => 6,
            Token::ConstantUnsignedInteger(_) => 7,
            Token::ConstantUnsignedLong(_) => 8,
            Token::ConstantFloat(_) => 9,
            Token::ConstantDouble(_) => 10,
            Token::LeftBracket => 11,
            Token::RightBracket => 12,
            Token::LeftBrace => 13,
            Token::RightBrace => 14,
            Token::Comma => 15,
            Token::SemiColon => 16,
            Token::Ellipsis => 17,
            Token::Question => 18,
            Token::Colon => 19,
            Token::Dot => 20,
            Token::PtrOp => 21,
            Token::IncOp => 22,
            Token::DecOp => 23,
            Token::Sizeof => 24,
            Token::Ampersand => 25,
            Token::Exclamation => 26,
            Token::Tilde => 27,
            Token::Minus => 28,
            Token::Plus => 29,
            Token::Star => 30,
            Token::Slash => 31,
            Token::Percent => 32,
            Token::LeftOp => 33,
            Token::RightOp => 34,
            Token::LessThan => 35,
            Token::GreaterThan => 36,
            Token::Caret => 37,
            Token::Pipe => 38,
            Token::LeOp => 39,
            Token::GeOp => 40,
            Token::EqOp => 41,
            Token::NeOp => 42,
            Token::AndOp => 43,
            Token::OrOp => 44,
            Token::Equal => 45,
            Token::MulAssign => 46,
            Token::DivAssign => 47,
            Token::ModAssign => 48,
            Token::AddAssign => 49,
            Token::SubAssign => 50,
            Token::LeftAssign => 51,
            Token::RightAssign => 52,
            Token::AndAssign => 53,
            Token::XorAssign => 54,
            Token::OrAssign => 55,
            Token::Case => 56,
            Token::Default => 57,
            Token::If => 58,
            Token::Else => 59,
            Token::Switch => 60,
            Token::While => 61,
            Token::Do => 62,
            Token::For => 63,
            Token::Goto => 64,
            Token::Continue => 65,
            Token::Break => 66,
            Token::Return => 67,
            Token::Typedef => 68,
            Token::Extern => 69,
            Token::Static => 70,
            Token::Auto => 71,
            Token::Register => 72,
            Token::Const => 73,
            Token::Volatile => 74,
            Token::Void => 75,
            Token::Char => 76,
            Token::Short => 77,
            Token::Int => 78,
            Token::Long => 79,
            Token::Float => 80,
            Token::Double => 81,
            Token::Signed => 82,
            Token::Unsigned => 83,
            Token::Struct => 84,
            Token::Union => 85,
            Token::Enum => 86,
            _ => 87,
        }
    }
}
/// A struct that holds the whole parser table.
#[allow(unused_braces, unused_parens, unused_variables, non_snake_case, unused_mut)]
impl translation_unitParser {
    /// Calculates the states and parser tables from the grammar.
    #[allow(clippy::clone_on_copy)]
    pub fn new() -> Self {
        let rules: Vec<
            ::rusty_lr::rule::ProductionRule<::rusty_lr::TerminalSymbol<u8>, _>,
        > = vec![
            ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::Constant, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(4)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::Constant, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(5)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::Constant, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(6)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::Constant, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(7)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::Constant, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(8)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::Constant, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(9)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::Constant, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(10)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::primary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::primary_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::Constant),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::primary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(3)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::primary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::postfix_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::primary_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::postfix_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::postfix_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::postfix_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::postfix_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::postfix_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::postfix_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::argument_expression_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::postfix_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::postfix_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(20)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::postfix_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::postfix_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(21)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::postfix_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::postfix_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(22)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::postfix_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::postfix_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(23)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::argument_expression_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::argument_expression_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::argument_expression_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::postfix_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(22)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(23)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(25)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(30)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(29)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(28)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(27)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(26)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::unary_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::type_name),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::cast_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::cast_expression, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::type_name),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::multiplicative_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::multiplicative_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::multiplicative_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(30)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::multiplicative_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::multiplicative_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(31)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::multiplicative_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::multiplicative_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(32)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::cast_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::additive_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::multiplicative_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::additive_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::additive_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(29)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::multiplicative_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::additive_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::additive_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(28)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::multiplicative_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::shift_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::additive_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::shift_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::shift_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(33)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::additive_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::shift_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::shift_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(34)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::additive_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::relational_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::shift_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::relational_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::relational_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(35)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::shift_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::relational_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::relational_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(36)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::shift_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::relational_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::relational_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(39)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::shift_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::relational_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::relational_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(40)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::shift_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::equality_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::relational_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::equality_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::equality_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(41)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::relational_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::equality_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::equality_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(42)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::relational_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::and_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::equality_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::and_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::and_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(25)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::equality_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::exclusive_or_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::and_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::exclusive_or_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::exclusive_or_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(37)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::and_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::inclusive_or_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::exclusive_or_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::inclusive_or_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::inclusive_or_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(38)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::exclusive_or_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::logical_and_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::inclusive_or_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::logical_and_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::logical_and_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(43)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::inclusive_or_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::logical_or_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::logical_and_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::logical_or_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::logical_or_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(44)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::logical_and_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::conditional_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::logical_or_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::conditional_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::logical_or_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(18)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(19)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::conditional_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::conditional_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(45)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(46)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(47)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(48)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(49)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(50)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(51)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(52)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(53)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(54)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::assignment_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::unary_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(55)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::constant_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::conditional_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::initializer, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::assignment_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::initializer, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(13)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::initializer_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(14)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::initializer, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(13)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::initializer_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(14)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::initializer_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::initializer),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::initializer_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::initializer_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::initializer),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::labeled_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(19)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::labeled_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(56)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::constant_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(19)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::labeled_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(57)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(19)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::statement_or_declaration, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::statement_or_declaration, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::compound_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(13)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_statement_or_declarationStar59),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(14)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::expression_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::expression_statement, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::selection_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(58)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),],
            precedence : Some(::rusty_lr::rule::Precedence::Fixed(1usize)), },
            ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::selection_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(58)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(59)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),],
            precedence : Some(::rusty_lr::rule::Precedence::Fixed(0usize)), },
            ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::selection_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(60)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::declaration_or_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::declaration_or_expression, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression_statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::iteration_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(61)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::iteration_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(62)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(61)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::iteration_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(63)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declaration_or_expression),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression_statement),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::iteration_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(63)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declaration_or_expression),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression_statement),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::jump_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(64)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::jump_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(65)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::jump_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(66)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::jump_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(67)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::jump_statement, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(67)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::declaration, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_declaration_specifierPlus60),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::declaration, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_declaration_specifierPlus60),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::init_declarator_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::function_definition, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_declaration_specifierPlus60),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declarator),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::compound_statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::function_definition, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declarator),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::compound_statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::statement, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::labeled_statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::statement, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::compound_statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::statement, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::expression_statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::statement, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::selection_statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::statement, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::iteration_statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::statement, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::jump_statement),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::external_declaration, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::function_definition),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::external_declaration, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::translation_unit, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_external_declarationStar62),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_qualifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(73)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_qualifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(74)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::direct_declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::declarator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(30)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_type_qualifierStar64),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_declarator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_declarator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::direct_declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::constant_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::direct_declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::direct_declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::parameter_type_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::direct_declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::abstract_declarator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(30)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_type_qualifierStar64),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::abstract_declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::abstract_declarator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(30)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_type_qualifierStar64),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::abstract_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::direct_abstract_declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_abstract_declarator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::abstract_declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_abstract_declarator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_abstract_declarator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::constant_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_abstract_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::direct_abstract_declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_abstract_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::direct_abstract_declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::constant_expression),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_abstract_declarator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_abstract_declarator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::parameter_type_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_abstract_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::direct_abstract_declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::direct_abstract_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::direct_abstract_declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::parameter_type_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::specifier_qualifier, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::type_qualifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::specifier_qualifier, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::type_specifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_name, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_specifier_qualifierPlus65),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_abstract_declaratorQuestion66),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(75)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(76)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(77)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(78)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(79)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(80)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(81)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(82)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(83)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::struct_or_union_specifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::type_specifier, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::enum_specifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::storage_class_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(68)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::storage_class_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(69)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::storage_class_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(70)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::storage_class_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(71)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::storage_class_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(72)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::declaration_specifier, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::storage_class_specifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::declaration_specifier, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::type_specifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::declaration_specifier, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::type_qualifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::parameter_declaration, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_declaration_specifierPlus60),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::parameter_declaration, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_declaration_specifierPlus60),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::abstract_declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::parameter_declaration, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_declaration_specifierPlus60),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::parameter_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::parameter_declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::parameter_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::parameter_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::parameter_declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::parameter_type_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::parameter_list),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::parameter_type_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::parameter_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(17)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::struct_or_union, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(84)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::struct_or_union, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(85)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::struct_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::struct_declarator_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::struct_declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::struct_declarator_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::struct_declarator_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::struct_declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::struct_declaration, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_specifier_qualifierPlus65),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::struct_declarator_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::struct_or_union_specifier, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::struct_or_union),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_identQuestion67),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(13)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_struct_declarationStar69),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(14)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::struct_or_union_specifier, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::struct_or_union),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::enum_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(86)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_identQuestion67),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(13)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::enumerator_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(14)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::enum_specifier, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(86)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::enumerator_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::enumerator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::enumerator_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::enumerator_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::enumerator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::enumerator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::enumerator, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(45)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::constant_expression),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::init_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::init_declarator, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declarator),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(45)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::initializer),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::init_declarator_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::init_declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::init_declarator_list, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::init_declarator_list),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::init_declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_statement_or_declarationPlus58, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement_or_declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_statement_or_declarationPlus58, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_statement_or_declarationPlus58),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::statement_or_declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_statement_or_declarationStar59, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_statement_or_declarationPlus58),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_statement_or_declarationStar59, rule : vec![],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_declaration_specifierPlus60, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declaration_specifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_declaration_specifierPlus60, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_declaration_specifierPlus60),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::declaration_specifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_external_declarationPlus61, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::external_declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_external_declarationPlus61, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_external_declarationPlus61),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::external_declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_external_declarationStar62, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_external_declarationPlus61),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_external_declarationStar62, rule : vec![],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_type_qualifierPlus63, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::type_qualifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_type_qualifierPlus63, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_type_qualifierPlus63),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::type_qualifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_type_qualifierStar64, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_type_qualifierPlus63),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_type_qualifierStar64, rule : vec![],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_specifier_qualifierPlus65, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::specifier_qualifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_specifier_qualifierPlus65, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_specifier_qualifierPlus65),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::specifier_qualifier),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_abstract_declaratorQuestion66, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::abstract_declarator),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_abstract_declaratorQuestion66, rule : vec![],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_identQuestion67, rule :
            vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_identQuestion67, rule : vec![], precedence :
            None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_struct_declarationPlus68, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::struct_declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_struct_declarationPlus68, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_struct_declarationPlus68),
            ::rusty_lr::Token::NonTerm(translation_unitNonTerminals::struct_declaration),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_struct_declarationStar69, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::_struct_declarationPlus68),],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::_struct_declarationStar69, rule : vec![],
            precedence : None, }, ::rusty_lr::rule::ProductionRule { name :
            translation_unitNonTerminals::Augmented, rule :
            vec![::rusty_lr::Token::NonTerm(translation_unitNonTerminals::translation_unit),
            ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Eof),], precedence :
            None, },
        ];
        let terminal_class_names = vec![
            "ident", "lparen", "rparen", "string_literal", "constant_character",
            "constant_integer", "constant_long", "constant_unsigned_integer",
            "constant_unsigned_long", "constant_float", "constant_double", "lbracket",
            "rbracket", "lbrace", "rbrace", "comma", "semicolon", "ellipsis", "question",
            "colon", "dot", "ptr_op", "inc_op", "dec_op", "sizeof", "ampersand",
            "exclamation", "tilde", "minus", "plus", "star", "slash", "percent",
            "left_op", "right_op", "less", "greater", "caret", "pipe", "le", "ge", "eq",
            "ne", "and_op", "or_op", "assign", "mul_assign", "div_assign", "mod_assign",
            "add_assign", "sub_assign", "left_assign", "right_assign", "and_assign",
            "xor_assign", "or_assign", "case", "default", "if_", "else_", "switch",
            "while_", "do_", "for_", "goto_", "continue_", "break_", "return_",
            "typedef", "extern_", "static_", "auto", "register", "const_", "volatile",
            "void_", "char_", "short_", "int_", "long_", "float_", "double_", "signed",
            "unsigned", "struct_", "union_", "enum_", "<Others>",
        ];
        let rules = rules
            .into_iter()
            .map(move |rule| {
                rule.map(
                    |term| match term {
                        ::rusty_lr::TerminalSymbol::Term(term) => {
                            terminal_class_names[term as usize]
                        }
                        ::rusty_lr::TerminalSymbol::Error => "error",
                        ::rusty_lr::TerminalSymbol::Eof => "eof",
                    },
                    |nonterm| nonterm,
                )
            })
            .collect();
        let __rustylr_tset76: Vec<u8> = vec![
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
            74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
        ];
        let __rustylr_tset2: Vec<u8> = vec![
            0, 1, 2, 11, 15, 16, 30, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
            81, 82, 83, 84, 85, 86
        ];
        let __rustylr_tset4: Vec<u8> = vec![0, 1, 2, 11, 15, 30];
        let __rustylr_tset3: Vec<u8> = vec![0, 1, 2, 11, 15, 30, 73, 74];
        let __rustylr_tset63: Vec<u8> = vec![0, 1, 2, 11, 30];
        let __rustylr_tset24: Vec<u8> = vec![
            0, 1, 2, 11, 30, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
        ];
        let __rustylr_tset97: Vec<u8> = vec![
            0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
            74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
        ];
        let __rustylr_tset98: Vec<u8> = vec![
            0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 22, 23, 24, 25, 26, 27, 28, 29,
            30, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
            75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
        ];
        let __rustylr_tset1: Vec<u8> = vec![0, 1, 30];
        let __rustylr_tset74: Vec<u8> = vec![
            0, 1, 30, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
            85, 86
        ];
        let __rustylr_tset6: Vec<u8> = vec![0, 13];
        let __rustylr_tset9: Vec<u8> = vec![
            1, 2, 11, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33,
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55
        ];
        let __rustylr_tset0: Vec<u8> = vec![1, 2, 11, 13, 15, 16, 45];
        let __rustylr_tset28: Vec<u8> = vec![1, 2, 11, 15];
        let __rustylr_tset29: Vec<u8> = vec![1, 2, 11, 30];
        let __rustylr_tset75: Vec<u8> = vec![
            1, 11, 15, 16, 18, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36,
            37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55
        ];
        let __rustylr_tset27: Vec<u8> = vec![2];
        let __rustylr_tset17: Vec<u8> = vec![
            2, 12, 14, 15, 16, 18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
            39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset10: Vec<u8> = vec![
            2, 12, 14, 15, 16, 18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
            39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55
        ];
        let __rustylr_tset52: Vec<u8> = vec![2, 12, 14, 15, 16, 19];
        let __rustylr_tset23: Vec<u8> = vec![2, 12, 15, 16, 19];
        let __rustylr_tset5: Vec<u8> = vec![2, 13, 15, 16, 45];
        let __rustylr_tset22: Vec<u8> = vec![2, 15];
        let __rustylr_tset11: Vec<u8> = vec![
            2, 15, 18, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
            43, 44
        ];
        let __rustylr_tset12: Vec<u8> = vec![
            2, 15, 18, 25, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset13: Vec<u8> = vec![
            2, 15, 18, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset14: Vec<u8> = vec![
            2, 15, 18, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset15: Vec<u8> = vec![2, 15, 18, 25, 37, 38, 41, 42, 43, 44];
        let __rustylr_tset16: Vec<u8> = vec![2, 15, 18, 25, 37, 38, 43, 44];
        let __rustylr_tset18: Vec<u8> = vec![2, 15, 18, 37, 38, 43, 44];
        let __rustylr_tset19: Vec<u8> = vec![2, 15, 18, 38, 43, 44];
        let __rustylr_tset20: Vec<u8> = vec![2, 15, 18, 43, 44];
        let __rustylr_tset21: Vec<u8> = vec![2, 15, 18, 44];
        let __rustylr_tset62: Vec<u8> = vec![12];
        let __rustylr_tset40: Vec<u8> = vec![12, 15];
        let __rustylr_tset30: Vec<u8> = vec![
            12, 15, 18, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
            43, 44
        ];
        let __rustylr_tset31: Vec<u8> = vec![
            12, 15, 18, 25, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset32: Vec<u8> = vec![
            12, 15, 18, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset33: Vec<u8> = vec![
            12, 15, 18, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset34: Vec<u8> = vec![12, 15, 18, 25, 37, 38, 41, 42, 43, 44];
        let __rustylr_tset35: Vec<u8> = vec![12, 15, 18, 25, 37, 38, 43, 44];
        let __rustylr_tset36: Vec<u8> = vec![12, 15, 18, 37, 38, 43, 44];
        let __rustylr_tset37: Vec<u8> = vec![12, 15, 18, 38, 43, 44];
        let __rustylr_tset38: Vec<u8> = vec![12, 15, 18, 43, 44];
        let __rustylr_tset39: Vec<u8> = vec![12, 15, 18, 44];
        let __rustylr_tset53: Vec<u8> = vec![
            12, 18, 25, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset54: Vec<u8> = vec![
            12, 18, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset55: Vec<u8> = vec![
            12, 18, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset56: Vec<u8> = vec![12, 18, 25, 37, 38, 41, 42, 43, 44];
        let __rustylr_tset57: Vec<u8> = vec![12, 18, 25, 37, 38, 43, 44];
        let __rustylr_tset58: Vec<u8> = vec![12, 18, 37, 38, 43, 44];
        let __rustylr_tset59: Vec<u8> = vec![12, 18, 38, 43, 44];
        let __rustylr_tset60: Vec<u8> = vec![12, 18, 43, 44];
        let __rustylr_tset61: Vec<u8> = vec![12, 18, 44];
        let __rustylr_tset7: Vec<u8> = vec![13];
        let __rustylr_tset25: Vec<u8> = vec![14];
        let __rustylr_tset8: Vec<u8> = vec![14, 15];
        let __rustylr_tset100: Vec<u8> = vec![14, 15, 16];
        let __rustylr_tset99: Vec<u8> = vec![
            14, 15, 18, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
            43, 44
        ];
        let __rustylr_tset65: Vec<u8> = vec![
            14, 15, 18, 25, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset66: Vec<u8> = vec![
            14, 15, 18, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset67: Vec<u8> = vec![
            14, 15, 18, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset68: Vec<u8> = vec![14, 15, 18, 25, 37, 38, 41, 42, 43, 44];
        let __rustylr_tset69: Vec<u8> = vec![14, 15, 18, 25, 37, 38, 43, 44];
        let __rustylr_tset70: Vec<u8> = vec![14, 15, 18, 37, 38, 43, 44];
        let __rustylr_tset71: Vec<u8> = vec![14, 15, 18, 38, 43, 44];
        let __rustylr_tset72: Vec<u8> = vec![14, 15, 18, 43, 44];
        let __rustylr_tset73: Vec<u8> = vec![14, 15, 18, 44];
        let __rustylr_tset26: Vec<u8> = vec![
            14, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86
        ];
        let __rustylr_tset64: Vec<u8> = vec![15, 16];
        let __rustylr_tset87: Vec<u8> = vec![
            15, 16, 18, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
            43, 44
        ];
        let __rustylr_tset88: Vec<u8> = vec![
            15, 16, 18, 25, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset89: Vec<u8> = vec![
            15, 16, 18, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset90: Vec<u8> = vec![
            15, 16, 18, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset91: Vec<u8> = vec![15, 16, 18, 25, 37, 38, 41, 42, 43, 44];
        let __rustylr_tset92: Vec<u8> = vec![15, 16, 18, 25, 37, 38, 43, 44];
        let __rustylr_tset93: Vec<u8> = vec![15, 16, 18, 37, 38, 43, 44];
        let __rustylr_tset94: Vec<u8> = vec![15, 16, 18, 38, 43, 44];
        let __rustylr_tset95: Vec<u8> = vec![15, 16, 18, 43, 44];
        let __rustylr_tset96: Vec<u8> = vec![15, 16, 18, 44];
        let __rustylr_tset41: Vec<u8> = vec![
            15, 18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
            43, 44
        ];
        let __rustylr_tset42: Vec<u8> = vec![
            15, 18, 19, 25, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset43: Vec<u8> = vec![
            15, 18, 19, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset44: Vec<u8> = vec![
            15, 18, 19, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset45: Vec<u8> = vec![15, 18, 19, 25, 37, 38, 41, 42, 43, 44];
        let __rustylr_tset46: Vec<u8> = vec![15, 18, 19, 25, 37, 38, 43, 44];
        let __rustylr_tset47: Vec<u8> = vec![15, 18, 19, 37, 38, 43, 44];
        let __rustylr_tset48: Vec<u8> = vec![15, 18, 19, 38, 43, 44];
        let __rustylr_tset49: Vec<u8> = vec![15, 18, 19, 43, 44];
        let __rustylr_tset50: Vec<u8> = vec![15, 18, 19, 44];
        let __rustylr_tset51: Vec<u8> = vec![15, 19];
        let __rustylr_tset77: Vec<u8> = vec![
            18, 19, 25, 28, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset78: Vec<u8> = vec![
            18, 19, 25, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset79: Vec<u8> = vec![
            18, 19, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
        ];
        let __rustylr_tset80: Vec<u8> = vec![18, 19, 25, 37, 38, 41, 42, 43, 44];
        let __rustylr_tset81: Vec<u8> = vec![18, 19, 25, 37, 38, 43, 44];
        let __rustylr_tset82: Vec<u8> = vec![18, 19, 37, 38, 43, 44];
        let __rustylr_tset83: Vec<u8> = vec![18, 19, 38, 43, 44];
        let __rustylr_tset84: Vec<u8> = vec![18, 19, 43, 44];
        let __rustylr_tset85: Vec<u8> = vec![18, 19, 44];
        let __rustylr_tset86: Vec<u8> = vec![19];
        let __rustylr_tset101: Vec<u8> = vec![61];
        let states: Vec<::rusty_lr::parser::state::IntermediateState<u8, _, u16, u8>> = vec![
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(539, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(541, true)),
            (translation_unitNonTerminals::function_definition,
            ::rusty_lr::parser::state::ShiftTarget::new(541, true)),
            (translation_unitNonTerminals::external_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(541, true)),
            (translation_unitNonTerminals::translation_unit,
            ::rusty_lr::parser::state::ShiftTarget::new(542, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(544, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(874, true)),
            (translation_unitNonTerminals::_external_declarationPlus61,
            ::rusty_lr::parser::state::ShiftTarget::new(879, true)),
            (translation_unitNonTerminals::_external_declarationStar62,
            ::rusty_lr::parser::state::ShiftTarget::new(881, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : Some(vec![197]),
            ruleset : { let rules : & 'static [u8] = & [106, 107, 108, 109, 116, 117,
            118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 144, 145, 146, 147,
            148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162,
            170, 171, 176, 177, 178, 179, 192, 193, 194, 195, 196, 197, 212,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![123]; __reduce_map.extend(__rustylr_tset0.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [123,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(140, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [121, 122, 123, 124, 124, 125, 126, 127,
            128,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(6, true)),
            (translation_unitNonTerminals::_type_qualifierPlus63,
            ::rusty_lr::parser::state::ShiftTarget::new(7, true)),
            (translation_unitNonTerminals::_type_qualifierStar64,
            ::rusty_lr::parser::state::ShiftTarget::new(9, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![201]; __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 122, 198, 199, 200, 201,]; let shifted : & 'static [u8] = & [0, 0, 1, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![119]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [119,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![120]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [120,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![198]; __reduce_map
            .extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [198,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(8, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![200]; __reduce_map.extend(__rustylr_tset4.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 199, 200,]; let shifted : & 'static [u8] = & [0, 0, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![199]; __reduce_map
            .extend(__rustylr_tset3.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [199,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(3, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(10, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [121, 122, 122, 123, 124, 125, 126, 127,
            128,]; let shifted : & 'static [u8] = & [0, 0, 2, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![122]; __reduce_map
            .extend(__rustylr_tset5.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [122,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(12, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(447, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![121]; __reduce_map.extend(__rustylr_tset5.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [121,
            125, 126, 127, 128,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(13, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::parameter_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(148, true)),
            (translation_unitNonTerminals::parameter_list,
            ::rusty_lr::parser::state::ShiftTarget::new(149, true)),
            (translation_unitNonTerminals::parameter_type_list,
            ::rusty_lr::parser::state::ShiftTarget::new(445, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(157, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [119, 120, 127, 128, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
            164, 165, 166, 167, 168, 169, 170, 171, 176, 177, 178, 179, 192, 193,]; let
            shifted : & 'static [u8] = & [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![128]; __reduce_map
            .extend(__rustylr_tset0.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [128,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![155]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [155,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![156]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [156,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![157]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [157,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![158]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [158,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![159]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [159,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![144]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [144,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![145]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [145,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![146]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [146,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![147]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [147,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![148]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [148,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![149]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [149,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![150]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [150,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![151]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [151,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![152]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [152,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![170]; __reduce_map
            .extend(__rustylr_tset6.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [170,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![171]; __reduce_map
            .extend(__rustylr_tset6.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [171,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(31, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::_identQuestion67,
            ::rusty_lr::parser::state::ShiftTarget::new(32, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![207]; __reduce_map.extend(__rustylr_tset7.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [178,
            179, 206, 207,]; let shifted : & 'static [u8] = & [1, 1, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![179]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            let reduce_rules = vec![206]; __reduce_map.extend(__rustylr_tset7.iter()
            .map(| term | (* term, reduce_rules.clone()))); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [179, 206,]; let shifted : & 'static [u8] = & [2, 1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(13,
            ::rusty_lr::parser::state::ShiftTarget::new(33, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [178,]; let shifted : & 'static [u8] = & [2,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(34, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::enumerator_list,
            ::rusty_lr::parser::state::ShiftTarget::new(69, true)),
            (translation_unitNonTerminals::enumerator,
            ::rusty_lr::parser::state::ShiftTarget::new(73, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [178, 180, 181, 182, 183,]; let shifted : &
            'static [u8] = & [3, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(45, ::rusty_lr::parser::state::ShiftTarget::new(35, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![182]; __reduce_map.extend(__rustylr_tset8.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [182, 183,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(538, true)),
            (translation_unitNonTerminals::constant_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(538, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 78, 183,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![7]; __reduce_map.extend(__rustylr_tset9.iter().map(| term
            | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect() },
            error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [7,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(481, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(466, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![9]; __reduce_map.extend(__rustylr_tset9.iter().map(| term
            | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect() },
            error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [9,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![0]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [0,]; let shifted : & 'static [u8]
            = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![1]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [1,]; let shifted : & 'static [u8]
            = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![2]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [2,]; let shifted : & 'static [u8]
            = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![3]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [3,]; let shifted : & 'static [u8]
            = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![4]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [4,]; let shifted : & 'static [u8]
            = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![5]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [5,]; let shifted : & 'static [u8]
            = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![6]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [6,]; let shifted : & 'static [u8]
            = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(167, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 31, 32,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(53, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(479, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(53, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(53, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(53, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(53, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(53, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(60, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(188, true)), (20,
            ::rusty_lr::parser::state::ShiftTarget::new(273, true)), (21,
            ::rusty_lr::parser::state::ShiftTarget::new(275, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(277, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(278, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![21]; __reduce_map.extend(__rustylr_tset10.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [12, 13,
            14, 15, 16, 17, 18, 21,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1, 1,
            1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (2,
            ::rusty_lr::parser::state::ShiftTarget::new(61, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::argument_expression_list,
            ::rusty_lr::parser::state::ShiftTarget::new(62, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(187, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(187, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
            31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
            50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
            69, 70, 71, 72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![13]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [13,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(63, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(64, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [14, 20,]; let shifted : & 'static [u8] = & [3, 1,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![14]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [14,]; let shifted : & 'static
            [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(478, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(478, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(45, ::rusty_lr::parser::state::ShiftTarget::new(66, true)), (46,
            ::rusty_lr::parser::state::ShiftTarget::new(468, true)), (47,
            ::rusty_lr::parser::state::ShiftTarget::new(469, true)), (48,
            ::rusty_lr::parser::state::ShiftTarget::new(470, true)), (49,
            ::rusty_lr::parser::state::ShiftTarget::new(471, true)), (50,
            ::rusty_lr::parser::state::ShiftTarget::new(472, true)), (51,
            ::rusty_lr::parser::state::ShiftTarget::new(473, true)), (52,
            ::rusty_lr::parser::state::ShiftTarget::new(474, true)), (53,
            ::rusty_lr::parser::state::ShiftTarget::new(475, true)), (54,
            ::rusty_lr::parser::state::ShiftTarget::new(476, true)), (55,
            ::rusty_lr::parser::state::ShiftTarget::new(477, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![32]; __reduce_map.extend(__rustylr_tset11.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [32, 65,
            66, 67, 68, 69, 70, 71, 72, 73, 74, 75,]; let shifted : & 'static [u8] = &
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(348, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(348, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(30, ::rusty_lr::parser::state::ShiftTarget::new(68, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(98, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(100, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![38]; __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 38,]; let shifted : & 'static [u8] = & [1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(70, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(71, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [178, 181,]; let shifted : & 'static [u8] = & [4, 1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![178]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [178,]; let shifted : & 'static
            [u8] = & [5,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(34, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::enumerator,
            ::rusty_lr::parser::state::ShiftTarget::new(72, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [181, 182, 183,]; let shifted : & 'static [u8]
            = & [2, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) |
            { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted
            as usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![181]; __reduce_map
            .extend(__rustylr_tset8.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [181,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![180]; __reduce_map
            .extend(__rustylr_tset8.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [180,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(28,
            ::rusty_lr::parser::state::ShiftTarget::new(75, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(96, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![41]; __reduce_map.extend(__rustylr_tset13.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            41,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(465, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(465, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(465, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 40,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(33, ::rusty_lr::parser::state::ShiftTarget::new(78, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(94, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![44]; __reduce_map.extend(__rustylr_tset14.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(464, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 42,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(35, ::rusty_lr::parser::state::ShiftTarget::new(82, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(92, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(102, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![49]; __reduce_map.extend(__rustylr_tset15.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 49,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(463, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 45,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(41,
            ::rusty_lr::parser::state::ShiftTarget::new(90, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(106, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![52]; __reduce_map.extend(__rustylr_tset16.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            52,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(91, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(82, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(92, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(102, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![50]; __reduce_map.extend(__rustylr_tset15.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 50,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(93, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 46,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(78, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(94, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![46]; __reduce_map.extend(__rustylr_tset14.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            46,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(95, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 43,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(75, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(96, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![43]; __reduce_map.extend(__rustylr_tset13.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            43,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(97, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(97, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(97, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 39,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(68, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(98, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(100, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![39]; __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 39,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![36]; __reduce_map
            .extend(__rustylr_tset17.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [36,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![37]; __reduce_map
            .extend(__rustylr_tset17.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [37,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(103, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 47,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(78, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(94, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![47]; __reduce_map.extend(__rustylr_tset14.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            47,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(105, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 48,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(78, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(94, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![48]; __reduce_map.extend(__rustylr_tset14.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            48,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(107, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(82, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(92, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(102, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(104, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![51]; __reduce_map.extend(__rustylr_tset15.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 51,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(25,
            ::rusty_lr::parser::state::ShiftTarget::new(109, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![54]; __reduce_map.extend(__rustylr_tset18.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [53,
            54,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(110, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(90, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(106, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![53]; __reduce_map.extend(__rustylr_tset16.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            53,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(37, ::rusty_lr::parser::state::ShiftTarget::new(112, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![56]; __reduce_map.extend(__rustylr_tset19.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [55, 56,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(113, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            55,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(25, ::rusty_lr::parser::state::ShiftTarget::new(109, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![55]; __reduce_map.extend(__rustylr_tset18.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [53, 55,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(115, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![58]; __reduce_map.extend(__rustylr_tset20.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            58,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(116, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 57,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(37,
            ::rusty_lr::parser::state::ShiftTarget::new(112, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![57]; __reduce_map.extend(__rustylr_tset19.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [55,
            57,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(43, ::rusty_lr::parser::state::ShiftTarget::new(118, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![60]; __reduce_map.extend(__rustylr_tset21.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [59, 60,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(119, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 59,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(115, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![59]; __reduce_map.extend(__rustylr_tset20.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            59,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(18, ::rusty_lr::parser::state::ShiftTarget::new(121, true)), (44,
            ::rusty_lr::parser::state::ShiftTarget::new(461, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![62]; __reduce_map.extend(__rustylr_tset22.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [61, 62,
            63,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(459, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(459, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(459, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(129, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(124, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [10, 77,]; let shifted : & 'static [u8] = &
            [2, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![10]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [10,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(126, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(126, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![77]; __reduce_map.extend(__rustylr_tset23.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [77,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![141]; __reduce_map
            .extend(__rustylr_tset24.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [141,]; let
            shifted : & 'static [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![202]; __reduce_map.extend(__rustylr_tset24.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [202,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(130, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![142]; __reduce_map
            .extend(__rustylr_tset24.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [142,]; let
            shifted : & 'static [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(133, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::_identQuestion67,
            ::rusty_lr::parser::state::ShiftTarget::new(134, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![207]; __reduce_map.extend(__rustylr_tset7.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [176,
            177, 206, 207,]; let shifted : & 'static [u8] = & [1, 1, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![177]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            let reduce_rules = vec![206]; __reduce_map.extend(__rustylr_tset7.iter()
            .map(| term | (* term, reduce_rules.clone()))); __reduce_map.into_iter()
            .collect() }, error_reduce : None, eof_reduce : None, ruleset : { let rules :
            & 'static [u8] = & [177, 206,]; let shifted : & 'static [u8] = & [2, 1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(13,
            ::rusty_lr::parser::state::ShiftTarget::new(135, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [176,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(136, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(139, true)),
            (translation_unitNonTerminals::_struct_declarationPlus68,
            ::rusty_lr::parser::state::ShiftTarget::new(153, true)),
            (translation_unitNonTerminals::_struct_declarationStar69,
            ::rusty_lr::parser::state::ShiftTarget::new(155, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![211]; __reduce_map.extend(__rustylr_tset25.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 170,
            171, 175, 176, 176, 177, 178, 179, 202, 203, 208, 209, 210, 211,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![208]; __reduce_map.extend(__rustylr_tset26.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [208,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![153]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [153,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![154]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [154,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(142, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(454, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(436, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(454, true)),
            (translation_unitNonTerminals::struct_declarator_list,
            ::rusty_lr::parser::state::ShiftTarget::new(455, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [119, 120, 121, 122, 123, 124, 125, 126, 127,
            128, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 170,
            171, 172, 173, 174, 175, 176, 177, 178, 179, 203,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(141, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [124,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![124]; __reduce_map
            .extend(__rustylr_tset0.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [124,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(6, true)),
            (translation_unitNonTerminals::_type_qualifierPlus63,
            ::rusty_lr::parser::state::ShiftTarget::new(7, true)),
            (translation_unitNonTerminals::_type_qualifierStar64,
            ::rusty_lr::parser::state::ShiftTarget::new(143, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![201]; __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 122, 198, 199, 200, 201,]; let shifted : & 'static [u8] = & [0, 0, 1, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(142, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(10, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [121, 122, 122, 123, 124, 125, 126, 127,
            128,]; let shifted : & 'static [u8] = & [0, 0, 2, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![162]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [162,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![161]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [161,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![160]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [160,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![192]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [192,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![166]; __reduce_map
            .extend(__rustylr_tset22.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [166,]; let
            shifted : & 'static [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(15, ::rusty_lr::parser::state::ShiftTarget::new(150, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![168]; __reduce_map.extend(__rustylr_tset27.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [167, 168, 169,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(17,
            ::rusty_lr::parser::state::ShiftTarget::new(151, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::parameter_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(152, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(157, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [119, 120, 144, 145, 146, 147, 148, 149, 150,
            151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
            167, 169, 170, 171, 176, 177, 178, 179, 192, 193,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![169]; __reduce_map.extend(__rustylr_tset27.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [169,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![167]; __reduce_map
            .extend(__rustylr_tset22.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [167,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(73, ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(154, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(139, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![210]; __reduce_map.extend(__rustylr_tset25.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 170,
            171, 175, 176, 177, 178, 179, 202, 203, 209, 210,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![209]; __reduce_map
            .extend(__rustylr_tset26.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [209,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(156, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [176,]; let shifted : & 'static
            [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![176]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [176,]; let shifted : & 'static
            [u8] = & [5,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(158, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(160, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(443, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(451, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(452, true)),
            (translation_unitNonTerminals::direct_abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(174, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(453, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![165]; __reduce_map.extend(__rustylr_tset22.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
            135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152,
            153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 170, 171,
            176, 177, 178, 179, 193,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(158, true)), (2,
            ::rusty_lr::parser::state::ShiftTarget::new(159, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(160, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(441, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(140, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(431, true)),
            (translation_unitNonTerminals::direct_abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(174, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::parameter_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(148, true)),
            (translation_unitNonTerminals::parameter_list,
            ::rusty_lr::parser::state::ShiftTarget::new(149, true)),
            (translation_unitNonTerminals::parameter_type_list,
            ::rusty_lr::parser::state::ShiftTarget::new(433, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(157, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [119, 120, 121, 122, 123, 124, 124, 125, 126,
            127, 128, 129, 130, 131, 132, 132, 133, 134, 135, 136, 137, 137, 138, 138,
            139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
            157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
            176, 177, 178, 179, 192, 193,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![137]; __reduce_map
            .extend(__rustylr_tset28.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [137,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (12,
            ::rusty_lr::parser::state::ShiftTarget::new(438, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(397, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(406, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(411, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(414, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(417, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(420, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(423, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(439, true)),
            (translation_unitNonTerminals::constant_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(439, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 78, 133, 134,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(162, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(163, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(168, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [31,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![31]; __reduce_map
            .extend(__rustylr_tset10.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [31,]; let
            shifted : & 'static [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(170, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(160, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(171, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(435, true)),
            (translation_unitNonTerminals::direct_abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(174, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(436, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_abstract_declaratorQuestion66,
            ::rusty_lr::parser::state::ShiftTarget::new(437, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![205]; __reduce_map.extend(__rustylr_tset27.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
            143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 170, 171, 176,
            177, 178, 179, 203, 204, 205,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 1, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(170, true)), (2,
            ::rusty_lr::parser::state::ShiftTarget::new(159, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(160, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(171, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(431, true)),
            (translation_unitNonTerminals::direct_abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(174, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::parameter_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(148, true)),
            (translation_unitNonTerminals::parameter_list,
            ::rusty_lr::parser::state::ShiftTarget::new(149, true)),
            (translation_unitNonTerminals::parameter_type_list,
            ::rusty_lr::parser::state::ShiftTarget::new(433, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(157, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [119, 120, 129, 130, 131, 132, 132, 133, 134,
            135, 136, 137, 137, 138, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150,
            151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
            166, 167, 168, 169, 170, 171, 176, 177, 178, 179, 192, 193,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) |
            { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted
            as usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(6, true)),
            (translation_unitNonTerminals::_type_qualifierPlus63,
            ::rusty_lr::parser::state::ShiftTarget::new(7, true)),
            (translation_unitNonTerminals::_type_qualifierStar64,
            ::rusty_lr::parser::state::ShiftTarget::new(172, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![201]; __reduce_map.extend(__rustylr_tset29.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 129, 130, 198, 199, 200, 201,]; let shifted : & 'static [u8] = & [0, 0,
            1, 1, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(170, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(160, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(171, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(173, true)),
            (translation_unitNonTerminals::direct_abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(174, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![130]; __reduce_map.extend(__rustylr_tset27.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [129,
            129, 130, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,]; let
            shifted : & 'static [u8] = & [0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![129]; __reduce_map
            .extend(__rustylr_tset22.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [129,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(175, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(179, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![131]; __reduce_map.extend(__rustylr_tset22.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [131,
            135, 136, 139, 140,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(176, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::parameter_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(148, true)),
            (translation_unitNonTerminals::parameter_list,
            ::rusty_lr::parser::state::ShiftTarget::new(149, true)),
            (translation_unitNonTerminals::parameter_type_list,
            ::rusty_lr::parser::state::ShiftTarget::new(177, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(157, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [119, 120, 139, 140, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
            164, 165, 166, 167, 168, 169, 170, 171, 176, 177, 178, 179, 192, 193,]; let
            shifted : & 'static [u8] = & [0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![139]; __reduce_map
            .extend(__rustylr_tset28.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [139,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(178, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [140,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![140]; __reduce_map
            .extend(__rustylr_tset28.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [140,]; let
            shifted : & 'static [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (12,
            ::rusty_lr::parser::state::ShiftTarget::new(180, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(397, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(406, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(411, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(414, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(417, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(420, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(423, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(429, true)),
            (translation_unitNonTerminals::constant_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(429, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 78, 135, 136,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![135]; __reduce_map
            .extend(__rustylr_tset28.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [135,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![19]; __reduce_map
            .extend(__rustylr_tset22.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [19,]; let
            shifted : & 'static [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(270, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(270, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(270, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
            53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(190, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(191, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(205, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(206, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(207, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(205, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(205, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(205, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(205, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(205, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(205, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(45,
            ::rusty_lr::parser::state::ShiftTarget::new(214, true)), (46,
            ::rusty_lr::parser::state::ShiftTarget::new(373, true)), (47,
            ::rusty_lr::parser::state::ShiftTarget::new(374, true)), (48,
            ::rusty_lr::parser::state::ShiftTarget::new(375, true)), (49,
            ::rusty_lr::parser::state::ShiftTarget::new(376, true)), (50,
            ::rusty_lr::parser::state::ShiftTarget::new(377, true)), (51,
            ::rusty_lr::parser::state::ShiftTarget::new(378, true)), (52,
            ::rusty_lr::parser::state::ShiftTarget::new(379, true)), (53,
            ::rusty_lr::parser::state::ShiftTarget::new(380, true)), (54,
            ::rusty_lr::parser::state::ShiftTarget::new(381, true)), (55,
            ::rusty_lr::parser::state::ShiftTarget::new(382, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![32]; __reduce_map.extend(__rustylr_tset30.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [32, 65,
            66, 67, 68, 69, 70, 71, 72, 73, 74, 75,]; let shifted : & 'static [u8] = &
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(348, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(348, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(30, ::rusty_lr::parser::state::ShiftTarget::new(216, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(218, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(219, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![38]; __reduce_map.extend(__rustylr_tset31.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 38,]; let shifted : & 'static [u8] = & [1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![35]; __reduce_map
            .extend(__rustylr_tset17.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(28,
            ::rusty_lr::parser::state::ShiftTarget::new(221, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(223, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![41]; __reduce_map.extend(__rustylr_tset32.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            41,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(222, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(222, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(222, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 40,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(216, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(218, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(219, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![40]; __reduce_map.extend(__rustylr_tset31.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 40,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(224, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(224, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(224, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 39,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(216, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(218, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(219, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![39]; __reduce_map.extend(__rustylr_tset31.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 39,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(226, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(228, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![44]; __reduce_map.extend(__rustylr_tset33.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(227, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 42,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(221, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(223, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![42]; __reduce_map.extend(__rustylr_tset32.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            42,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(229, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 43,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(221, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(223, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![43]; __reduce_map.extend(__rustylr_tset32.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            43,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(35, ::rusty_lr::parser::state::ShiftTarget::new(231, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(233, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(235, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(237, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![49]; __reduce_map.extend(__rustylr_tset34.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 49,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(232, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 45,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(226, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(228, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![45]; __reduce_map.extend(__rustylr_tset33.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            45,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(234, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 46,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(226, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(228, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![46]; __reduce_map.extend(__rustylr_tset33.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            46,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(236, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 47,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(226, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(228, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![47]; __reduce_map.extend(__rustylr_tset33.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            47,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(238, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 48,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(226, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(228, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![48]; __reduce_map.extend(__rustylr_tset33.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            48,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(240, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(242, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![52]; __reduce_map.extend(__rustylr_tset35.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            52,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(241, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(231, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(233, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(235, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(237, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![50]; __reduce_map.extend(__rustylr_tset34.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 50,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(243, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(231, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(233, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(235, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(237, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![51]; __reduce_map.extend(__rustylr_tset34.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 51,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(25,
            ::rusty_lr::parser::state::ShiftTarget::new(245, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![54]; __reduce_map.extend(__rustylr_tset36.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [53,
            54,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(246, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(240, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(242, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![53]; __reduce_map.extend(__rustylr_tset35.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            53,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(37, ::rusty_lr::parser::state::ShiftTarget::new(248, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![56]; __reduce_map.extend(__rustylr_tset37.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [55, 56,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(249, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            55,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(25, ::rusty_lr::parser::state::ShiftTarget::new(245, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![55]; __reduce_map.extend(__rustylr_tset36.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [53, 55,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(251, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![58]; __reduce_map.extend(__rustylr_tset38.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            58,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(252, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 57,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(37,
            ::rusty_lr::parser::state::ShiftTarget::new(248, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![57]; __reduce_map.extend(__rustylr_tset37.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [55,
            57,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(43, ::rusty_lr::parser::state::ShiftTarget::new(254, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![60]; __reduce_map.extend(__rustylr_tset39.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [59, 60,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(255, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 59,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(251, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![59]; __reduce_map.extend(__rustylr_tset38.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            59,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(18, ::rusty_lr::parser::state::ShiftTarget::new(257, true)), (44,
            ::rusty_lr::parser::state::ShiftTarget::new(371, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![62]; __reduce_map.extend(__rustylr_tset40.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [61, 62,
            63,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(369, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(369, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(369, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(262, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(263, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(264, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(262, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(262, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(262, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(262, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(262, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(262, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(12,
            ::rusty_lr::parser::state::ShiftTarget::new(271, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(272, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [12, 77,]; let shifted : & 'static [u8] = &
            [3, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![12]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [12,]; let shifted : & 'static
            [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(126, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(126, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(274, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [15,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![15]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [15,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(276, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [16,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![16]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [16,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![17]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [17,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![18]; __reduce_map
            .extend(__rustylr_tset9.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [18,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![25]; __reduce_map
            .extend(__rustylr_tset10.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [25,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![26]; __reduce_map.extend(__rustylr_tset10.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [26,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![27]; __reduce_map
            .extend(__rustylr_tset10.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [27,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![28]; __reduce_map.extend(__rustylr_tset10.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [28,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![29]; __reduce_map
            .extend(__rustylr_tset10.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [29,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![33]; __reduce_map.extend(__rustylr_tset10.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [33,]; let shifted : & 'static [u8] = & [4,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![24]; __reduce_map
            .extend(__rustylr_tset10.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [24,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![30]; __reduce_map.extend(__rustylr_tset10.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [30,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![23]; __reduce_map
            .extend(__rustylr_tset10.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [23,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![22]; __reduce_map.extend(__rustylr_tset10.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [22,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(45,
            ::rusty_lr::parser::state::ShiftTarget::new(290, true)), (46,
            ::rusty_lr::parser::state::ShiftTarget::new(349, true)), (47,
            ::rusty_lr::parser::state::ShiftTarget::new(351, true)), (48,
            ::rusty_lr::parser::state::ShiftTarget::new(353, true)), (49,
            ::rusty_lr::parser::state::ShiftTarget::new(355, true)), (50,
            ::rusty_lr::parser::state::ShiftTarget::new(357, true)), (51,
            ::rusty_lr::parser::state::ShiftTarget::new(359, true)), (52,
            ::rusty_lr::parser::state::ShiftTarget::new(361, true)), (53,
            ::rusty_lr::parser::state::ShiftTarget::new(363, true)), (54,
            ::rusty_lr::parser::state::ShiftTarget::new(365, true)), (55,
            ::rusty_lr::parser::state::ShiftTarget::new(367, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![32]; __reduce_map.extend(__rustylr_tset41.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [32, 65,
            66, 67, 68, 69, 70, 71, 72, 73, 74, 75,]; let shifted : & 'static [u8] = &
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(348, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(348, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(30, ::rusty_lr::parser::state::ShiftTarget::new(292, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(302, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(303, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![38]; __reduce_map.extend(__rustylr_tset42.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 38,]; let shifted : & 'static [u8] = & [1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(28,
            ::rusty_lr::parser::state::ShiftTarget::new(305, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(307, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![41]; __reduce_map.extend(__rustylr_tset43.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            41,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(306, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(306, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(306, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 40,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(292, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(302, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(303, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![40]; __reduce_map.extend(__rustylr_tset42.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 40,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(308, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(308, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(308, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 39,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(292, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(302, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(303, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![39]; __reduce_map.extend(__rustylr_tset42.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 39,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(310, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(312, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![44]; __reduce_map.extend(__rustylr_tset44.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(311, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 42,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(305, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(307, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![42]; __reduce_map.extend(__rustylr_tset43.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            42,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(313, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 43,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(305, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(307, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![43]; __reduce_map.extend(__rustylr_tset43.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            43,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(35, ::rusty_lr::parser::state::ShiftTarget::new(315, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(317, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(319, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(321, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![49]; __reduce_map.extend(__rustylr_tset45.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 49,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(316, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 45,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(310, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(312, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![45]; __reduce_map.extend(__rustylr_tset44.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            45,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(318, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 46,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(310, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(312, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![46]; __reduce_map.extend(__rustylr_tset44.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            46,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(320, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 47,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(310, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(312, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![47]; __reduce_map.extend(__rustylr_tset44.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            47,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(322, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 48,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(310, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(312, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![48]; __reduce_map.extend(__rustylr_tset44.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            48,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(324, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(326, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![52]; __reduce_map.extend(__rustylr_tset46.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            52,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(325, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(315, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(317, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(319, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(321, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![50]; __reduce_map.extend(__rustylr_tset45.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 50,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(327, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(315, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(317, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(319, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(321, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![51]; __reduce_map.extend(__rustylr_tset45.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 51,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(25,
            ::rusty_lr::parser::state::ShiftTarget::new(329, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![54]; __reduce_map.extend(__rustylr_tset47.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [53,
            54,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(330, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(324, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(326, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![53]; __reduce_map.extend(__rustylr_tset46.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            53,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(37, ::rusty_lr::parser::state::ShiftTarget::new(332, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![56]; __reduce_map.extend(__rustylr_tset48.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [55, 56,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(333, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            55,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(25, ::rusty_lr::parser::state::ShiftTarget::new(329, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![55]; __reduce_map.extend(__rustylr_tset47.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [53, 55,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(335, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![58]; __reduce_map.extend(__rustylr_tset49.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            58,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(336, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 57,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(37,
            ::rusty_lr::parser::state::ShiftTarget::new(332, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![57]; __reduce_map.extend(__rustylr_tset48.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [55,
            57,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(43, ::rusty_lr::parser::state::ShiftTarget::new(338, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![60]; __reduce_map.extend(__rustylr_tset50.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [59, 60,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(339, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 59,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(335, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![59]; __reduce_map.extend(__rustylr_tset49.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            59,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(18, ::rusty_lr::parser::state::ShiftTarget::new(341, true)), (44,
            ::rusty_lr::parser::state::ShiftTarget::new(346, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![62]; __reduce_map.extend(__rustylr_tset51.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [61, 62,
            63,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(342, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(342, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(342, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(15,
            ::rusty_lr::parser::state::ShiftTarget::new(343, true)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(344, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [63, 77,]; let shifted : & 'static [u8] = &
            [3, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(126, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(126, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(345, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63,]; let shifted : & 'static [u8] =
            & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![63]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [63,]; let shifted : & 'static [u8] = & [5,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(293, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(294, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(295, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(296, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(297, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(298, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(299, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(300, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(301, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(347, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 61,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(43,
            ::rusty_lr::parser::state::ShiftTarget::new(338, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![61]; __reduce_map.extend(__rustylr_tset50.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [59,
            61,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![65]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [65,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(350, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(350, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![66]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [66,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(352, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(352, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![67]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [67,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(354, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(354, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![68]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [68,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(356, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(356, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![69]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [69,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(358, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(358, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![70]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [70,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(360, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(360, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![71]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [71,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(362, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(362, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![72]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [72,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(364, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(364, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![73]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [73,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(366, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(366, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![74]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [74,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(368, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(368, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![75]; __reduce_map.extend(__rustylr_tset52.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [75,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(15,
            ::rusty_lr::parser::state::ShiftTarget::new(343, true)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(370, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [63, 77,]; let shifted : & 'static [u8] = &
            [3, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(345, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63,]; let shifted : & 'static [u8] =
            & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(192, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(193, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(194, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(195, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(196, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(197, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(198, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(199, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(200, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(372, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 61,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(43,
            ::rusty_lr::parser::state::ShiftTarget::new(254, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![61]; __reduce_map.extend(__rustylr_tset39.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [59,
            61,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(350, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(350, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(352, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(352, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(354, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(354, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(356, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(356, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(358, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(358, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(360, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(360, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(362, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(362, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(364, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(364, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(366, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(366, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(189, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(201, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(202, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(203, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(204, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(208, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(209, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(210, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(211, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(212, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(213, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(215, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(220, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(225, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(230, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(239, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(244, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(247, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(250, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(253, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(256, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(368, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(368, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(30, ::rusty_lr::parser::state::ShiftTarget::new(384, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(385, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(386, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![38]; __reduce_map.extend(__rustylr_tset53.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 38,]; let shifted : & 'static [u8] = & [1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(28,
            ::rusty_lr::parser::state::ShiftTarget::new(388, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(390, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![41]; __reduce_map.extend(__rustylr_tset54.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            41,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(389, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(389, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(389, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 40,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(384, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(385, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(386, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![40]; __reduce_map.extend(__rustylr_tset53.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 40,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(391, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(391, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(391, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 39,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(384, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(385, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(386, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![39]; __reduce_map.extend(__rustylr_tset53.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 39,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(393, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(395, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![44]; __reduce_map.extend(__rustylr_tset55.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(394, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 42,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(388, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(390, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![42]; __reduce_map.extend(__rustylr_tset54.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            42,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(396, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 43,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(388, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(390, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![43]; __reduce_map.extend(__rustylr_tset54.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            43,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(35, ::rusty_lr::parser::state::ShiftTarget::new(398, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(400, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(402, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(404, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![49]; __reduce_map.extend(__rustylr_tset56.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 49,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(399, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 45,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(393, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(395, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![45]; __reduce_map.extend(__rustylr_tset55.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            45,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(401, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 46,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(393, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(395, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![46]; __reduce_map.extend(__rustylr_tset55.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            46,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(403, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 47,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(393, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(395, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![47]; __reduce_map.extend(__rustylr_tset55.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            47,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(405, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 48,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(393, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(395, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![48]; __reduce_map.extend(__rustylr_tset55.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            48,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(407, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(409, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![52]; __reduce_map.extend(__rustylr_tset57.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            52,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(408, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(398, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(400, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(402, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(404, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![50]; __reduce_map.extend(__rustylr_tset56.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 50,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(410, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(398, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(400, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(402, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(404, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![51]; __reduce_map.extend(__rustylr_tset56.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 51,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(25,
            ::rusty_lr::parser::state::ShiftTarget::new(412, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![54]; __reduce_map.extend(__rustylr_tset58.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [53,
            54,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(397, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(413, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(407, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(409, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![53]; __reduce_map.extend(__rustylr_tset57.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            53,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(37, ::rusty_lr::parser::state::ShiftTarget::new(415, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![56]; __reduce_map.extend(__rustylr_tset59.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [55, 56,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(397, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(406, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(416, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            55,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(25, ::rusty_lr::parser::state::ShiftTarget::new(412, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![55]; __reduce_map.extend(__rustylr_tset58.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [53, 55,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(418, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![58]; __reduce_map.extend(__rustylr_tset60.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            58,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(397, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(406, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(411, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(419, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 57,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(37,
            ::rusty_lr::parser::state::ShiftTarget::new(415, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![57]; __reduce_map.extend(__rustylr_tset59.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [55,
            57,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(43, ::rusty_lr::parser::state::ShiftTarget::new(421, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![60]; __reduce_map.extend(__rustylr_tset61.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [59, 60,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(397, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(406, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(411, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(414, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(422, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 59,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(418, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![59]; __reduce_map.extend(__rustylr_tset60.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            59,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(18, ::rusty_lr::parser::state::ShiftTarget::new(424, true)), (44,
            ::rusty_lr::parser::state::ShiftTarget::new(427, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![62]; __reduce_map.extend(__rustylr_tset62.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [61, 62,
            63,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(425, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(425, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(425, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(15,
            ::rusty_lr::parser::state::ShiftTarget::new(343, true)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(426, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [63, 77,]; let shifted : & 'static [u8] = &
            [3, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(397, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(406, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(411, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(414, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(417, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(420, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(423, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(345, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63,]; let shifted : & 'static [u8] =
            & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(397, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(406, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(411, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(414, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(417, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(428, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 61,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(43,
            ::rusty_lr::parser::state::ShiftTarget::new(421, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![61]; __reduce_map.extend(__rustylr_tset61.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [59,
            61,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(12, ::rusty_lr::parser::state::ShiftTarget::new(430, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [136,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![136]; __reduce_map
            .extend(__rustylr_tset28.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [136,]; let
            shifted : & 'static [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(432, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [132,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![132]; __reduce_map
            .extend(__rustylr_tset28.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [132,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(434, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [138,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![138]; __reduce_map
            .extend(__rustylr_tset28.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [138,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![204]; __reduce_map.extend(__rustylr_tset27.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [204,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![203]; __reduce_map
            .extend(__rustylr_tset24.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [203,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![143]; __reduce_map.extend(__rustylr_tset27.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [143,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![133]; __reduce_map
            .extend(__rustylr_tset28.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [133,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(12, ::rusty_lr::parser::state::ShiftTarget::new(440, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [134,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![134]; __reduce_map
            .extend(__rustylr_tset28.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [134,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(73, ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(6, true)),
            (translation_unitNonTerminals::_type_qualifierPlus63,
            ::rusty_lr::parser::state::ShiftTarget::new(7, true)),
            (translation_unitNonTerminals::_type_qualifierStar64,
            ::rusty_lr::parser::state::ShiftTarget::new(442, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![201]; __reduce_map.extend(__rustylr_tset63.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 122, 129, 130, 198, 199, 200, 201,]; let shifted : & 'static [u8] = &
            [0, 0, 1, 1, 1, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(158, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(160, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(441, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(10, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(173, true)),
            (translation_unitNonTerminals::direct_abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(174, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![130]; __reduce_map.extend(__rustylr_tset27.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [121,
            122, 122, 123, 124, 125, 126, 127, 128, 129, 129, 130, 130, 131, 132, 133,
            134, 135, 136, 137, 138, 139, 140,]; let shifted : & 'static [u8] = & [0, 0,
            2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(6, true)),
            (translation_unitNonTerminals::_type_qualifierPlus63,
            ::rusty_lr::parser::state::ShiftTarget::new(7, true)),
            (translation_unitNonTerminals::_type_qualifierStar64,
            ::rusty_lr::parser::state::ShiftTarget::new(444, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![201]; __reduce_map.extend(__rustylr_tset4.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 122, 129, 130, 198, 199, 200, 201,]; let shifted : & 'static [u8] = &
            [0, 0, 1, 1, 1, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(158, true)), (11,
            ::rusty_lr::parser::state::ShiftTarget::new(160, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(443, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(10, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(173, true)),
            (translation_unitNonTerminals::direct_abstract_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(174, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![130]; __reduce_map.extend(__rustylr_tset22.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [121,
            122, 122, 123, 124, 125, 126, 127, 128, 129, 129, 130, 130, 131, 132, 133,
            134, 135, 136, 137, 138, 139, 140,]; let shifted : & 'static [u8] = & [0, 0,
            2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(446, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [127,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![127]; __reduce_map
            .extend(__rustylr_tset0.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [127,]; let shifted : & 'static
            [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(161, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (12,
            ::rusty_lr::parser::state::ShiftTarget::new(448, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(164, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(165, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(166, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(181, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(182, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(183, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(184, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(185, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(186, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(383, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(387, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(392, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(397, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(406, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(411, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(414, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(417, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(420, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(423, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(449, true)),
            (translation_unitNonTerminals::constant_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(449, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 78, 125, 126,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![126]; __reduce_map
            .extend(__rustylr_tset0.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [126,]; let shifted : & 'static
            [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(12,
            ::rusty_lr::parser::state::ShiftTarget::new(450, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [125,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![125]; __reduce_map
            .extend(__rustylr_tset0.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [125,]; let shifted : & 'static
            [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![163]; __reduce_map
            .extend(__rustylr_tset22.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [163,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![164]; __reduce_map.extend(__rustylr_tset22.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [164,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![193]; __reduce_map
            .extend(__rustylr_tset2.iter().map(| term | (* term, reduce_rules.clone())));
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [193,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![173]; __reduce_map
            .extend(__rustylr_tset64.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [173,]; let
            shifted : & 'static [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(15, ::rusty_lr::parser::state::ShiftTarget::new(456, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(458, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [174, 175,]; let shifted : & 'static [u8] = &
            [1, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(142, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(457, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::struct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(457, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [121, 122, 123, 124, 125, 126, 127, 128, 172,
            174,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![174]; __reduce_map
            .extend(__rustylr_tset64.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [174,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![175]; __reduce_map.extend(__rustylr_tset26.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [175,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(15,
            ::rusty_lr::parser::state::ShiftTarget::new(343, true)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(460, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [63, 77,]; let shifted : & 'static [u8] = &
            [3, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(345, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63,]; let shifted : & 'static [u8] =
            & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(462, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 61,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(43,
            ::rusty_lr::parser::state::ShiftTarget::new(118, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![61]; __reduce_map.extend(__rustylr_tset21.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [59,
            61,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(33, ::rusty_lr::parser::state::ShiftTarget::new(78, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(94, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![45]; __reduce_map.extend(__rustylr_tset14.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            45,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(75, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(96, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let mut
            __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![42]; __reduce_map.extend(__rustylr_tset13.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            42,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(30, ::rusty_lr::parser::state::ShiftTarget::new(68, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(98, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(100, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![40]; __reduce_map.extend(__rustylr_tset12.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 40,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(467, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(76, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(79, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(80, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(83, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(84, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(85, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(86, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(87, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(88, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(350, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(350, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(352, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(352, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(354, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(354, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(356, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(356, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(358, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(358, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(360, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(360, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(362, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(362, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(364, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(364, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(366, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(366, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(368, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(368, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![20]; __reduce_map.extend(__rustylr_tset22.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [20,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(480, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(53, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(482, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(493, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(494, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(495, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![38]; __reduce_map.extend(__rustylr_tset65.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 38,]; let shifted : & 'static [u8] = & [1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(28,
            ::rusty_lr::parser::state::ShiftTarget::new(497, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(499, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![41]; __reduce_map.extend(__rustylr_tset66.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            41,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(498, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(498, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(498, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 40,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(493, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(494, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(495, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![40]; __reduce_map.extend(__rustylr_tset65.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 40,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(500, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(500, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(500, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 39,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(493, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(494, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(495, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![39]; __reduce_map.extend(__rustylr_tset65.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 39,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(502, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(504, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![44]; __reduce_map.extend(__rustylr_tset67.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(503, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 42,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(497, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(499, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![42]; __reduce_map.extend(__rustylr_tset66.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            42,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(505, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 43,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(497, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(499, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![43]; __reduce_map.extend(__rustylr_tset66.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            43,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(35, ::rusty_lr::parser::state::ShiftTarget::new(507, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(509, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(511, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(513, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![49]; __reduce_map.extend(__rustylr_tset68.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 49,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(508, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 45,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(502, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(504, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![45]; __reduce_map.extend(__rustylr_tset67.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            45,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(510, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 46,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(502, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(504, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![46]; __reduce_map.extend(__rustylr_tset67.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            46,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(512, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 47,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(502, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(504, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![47]; __reduce_map.extend(__rustylr_tset67.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            47,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(514, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 48,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(502, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(504, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![48]; __reduce_map.extend(__rustylr_tset67.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            48,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(516, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(518, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![52]; __reduce_map.extend(__rustylr_tset69.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            52,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(517, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(507, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(509, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(511, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(513, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![50]; __reduce_map.extend(__rustylr_tset68.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 50,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(519, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(507, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(509, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(511, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(513, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![51]; __reduce_map.extend(__rustylr_tset68.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 51,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(25,
            ::rusty_lr::parser::state::ShiftTarget::new(521, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![54]; __reduce_map.extend(__rustylr_tset70.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [53,
            54,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(522, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(516, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(518, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![53]; __reduce_map.extend(__rustylr_tset69.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            53,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(37, ::rusty_lr::parser::state::ShiftTarget::new(524, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![56]; __reduce_map.extend(__rustylr_tset71.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [55, 56,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(525, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            55,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(25, ::rusty_lr::parser::state::ShiftTarget::new(521, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![55]; __reduce_map.extend(__rustylr_tset70.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [53, 55,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(527, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![58]; __reduce_map.extend(__rustylr_tset72.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            58,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(528, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 57,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(37,
            ::rusty_lr::parser::state::ShiftTarget::new(524, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![57]; __reduce_map.extend(__rustylr_tset71.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [55,
            57,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(43, ::rusty_lr::parser::state::ShiftTarget::new(530, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![60]; __reduce_map.extend(__rustylr_tset73.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [59, 60,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(531, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 59,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(527, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![59]; __reduce_map.extend(__rustylr_tset72.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            59,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(18, ::rusty_lr::parser::state::ShiftTarget::new(533, true)), (44,
            ::rusty_lr::parser::state::ShiftTarget::new(536, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![62]; __reduce_map.extend(__rustylr_tset8.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [61, 62,
            63,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(534, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(534, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(534, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(15,
            ::rusty_lr::parser::state::ShiftTarget::new(343, true)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(535, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [63, 77,]; let shifted : & 'static [u8] = &
            [3, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(345, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63,]; let shifted : & 'static [u8] =
            & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(483, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(484, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(485, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(486, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(487, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(488, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(489, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(490, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(491, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(537, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 61,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(43,
            ::rusty_lr::parser::state::ShiftTarget::new(530, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![61]; __reduce_map.extend(__rustylr_tset73.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [59,
            61,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![183]; __reduce_map.extend(__rustylr_tset8.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [183,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(6, true)),
            (translation_unitNonTerminals::_type_qualifierPlus63,
            ::rusty_lr::parser::state::ShiftTarget::new(7, true)),
            (translation_unitNonTerminals::_type_qualifierStar64,
            ::rusty_lr::parser::state::ShiftTarget::new(540, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![201]; __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 122, 198, 199, 200, 201,]; let shifted : & 'static [u8] = & [0, 0, 1, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(539, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(10, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [121, 122, 122, 123, 124, 125, 126, 127,
            128,]; let shifted : & 'static [u8] = & [0, 0, 2, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![194]; __reduce_map
            .extend(__rustylr_tset74.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : Some(vec![194]), ruleset : { let rules : & 'static [u8] = &
            [194,]; let shifted : & 'static [u8] = & [1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : Some(543), shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [212,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); __reduce_map.into_iter().collect() },
            error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [212,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(873, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [89, 109,]; let shifted : & 'static [u8] = &
            [0, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(546, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(573, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(634, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(636, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(642, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(646, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(653, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(777, true)),
            (translation_unitNonTerminals::statement_or_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(777, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(777, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(777, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(777, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(777, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(777, true)),
            (translation_unitNonTerminals::declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(777, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(777, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_statement_or_declarationPlus58,
            ::rusty_lr::parser::state::ShiftTarget::new(778, true)),
            (translation_unitNonTerminals::_statement_or_declarationStar59,
            ::rusty_lr::parser::state::ShiftTarget::new(780, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(734, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![191]; __reduce_map.extend(__rustylr_tset25.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [0, 1, 2,
            3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25,
            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
            64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 84, 85, 86, 87, 88,
            89, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
            107, 110, 111, 112, 113, 114, 115, 119, 120, 144, 145, 146, 147, 148, 149,
            150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171,
            176, 177, 178, 179, 188, 189, 190, 191, 192, 193,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(19, ::rusty_lr::parser::state::ShiftTarget::new(547, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![7]; __reduce_map.extend(__rustylr_tset75.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [7, 84,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(546, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(573, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(634, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(636, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(642, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(646, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(653, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(549, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(550, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![90]; __reduce_map
            .extend(__rustylr_tset76.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [90,]; let
            shifted : & 'static [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(565, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(566, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(567, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(565, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(565, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(565, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(565, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(565, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(565, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(600, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(609, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(614, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(617, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(620, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(623, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(626, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(632, true)),
            (translation_unitNonTerminals::constant_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(632, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 78, 85,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(575, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(576, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(587, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(588, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(589, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![38]; __reduce_map.extend(__rustylr_tset77.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 38,]; let shifted : & 'static [u8] = & [1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(28,
            ::rusty_lr::parser::state::ShiftTarget::new(591, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(593, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![41]; __reduce_map.extend(__rustylr_tset78.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            41,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(592, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(592, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(592, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 40,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(587, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(588, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(589, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![40]; __reduce_map.extend(__rustylr_tset77.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 40,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(594, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(594, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(594, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 39,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(587, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(588, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(589, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![39]; __reduce_map.extend(__rustylr_tset77.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 39,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(596, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(598, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![44]; __reduce_map.extend(__rustylr_tset79.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(597, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 42,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(591, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(593, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![42]; __reduce_map.extend(__rustylr_tset78.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            42,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(599, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 43,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(591, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(593, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![43]; __reduce_map.extend(__rustylr_tset78.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            43,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(35, ::rusty_lr::parser::state::ShiftTarget::new(601, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(603, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(605, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(607, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![49]; __reduce_map.extend(__rustylr_tset80.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 49,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(602, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 45,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(596, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(598, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![45]; __reduce_map.extend(__rustylr_tset79.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            45,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(604, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 46,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(596, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(598, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![46]; __reduce_map.extend(__rustylr_tset79.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            46,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(606, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 47,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(596, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(598, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![47]; __reduce_map.extend(__rustylr_tset79.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            47,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(608, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 48,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(596, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(598, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![48]; __reduce_map.extend(__rustylr_tset79.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            48,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(610, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(612, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![52]; __reduce_map.extend(__rustylr_tset81.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            52,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(611, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(601, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(603, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(605, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(607, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![50]; __reduce_map.extend(__rustylr_tset80.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 50,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(613, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(601, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(603, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(605, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(607, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![51]; __reduce_map.extend(__rustylr_tset80.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 51,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(25,
            ::rusty_lr::parser::state::ShiftTarget::new(615, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![54]; __reduce_map.extend(__rustylr_tset82.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [53,
            54,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(600, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(616, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(610, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(612, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![53]; __reduce_map.extend(__rustylr_tset81.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            53,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(37, ::rusty_lr::parser::state::ShiftTarget::new(618, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![56]; __reduce_map.extend(__rustylr_tset83.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [55, 56,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(600, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(609, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(619, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            55,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(25, ::rusty_lr::parser::state::ShiftTarget::new(615, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![55]; __reduce_map.extend(__rustylr_tset82.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [53, 55,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(621, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![58]; __reduce_map.extend(__rustylr_tset84.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            58,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(600, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(609, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(614, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(622, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 57,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(37,
            ::rusty_lr::parser::state::ShiftTarget::new(618, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![57]; __reduce_map.extend(__rustylr_tset83.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [55,
            57,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(43, ::rusty_lr::parser::state::ShiftTarget::new(624, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![60]; __reduce_map.extend(__rustylr_tset85.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [59, 60,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(600, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(609, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(614, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(617, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(625, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 59,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(621, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![59]; __reduce_map.extend(__rustylr_tset84.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            59,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(18, ::rusty_lr::parser::state::ShiftTarget::new(627, true)), (44,
            ::rusty_lr::parser::state::ShiftTarget::new(630, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![62]; __reduce_map.extend(__rustylr_tset86.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [61, 62,
            63,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(628, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(628, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(628, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(15,
            ::rusty_lr::parser::state::ShiftTarget::new(343, true)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(629, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [63, 77,]; let shifted : & 'static [u8] = &
            [3, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(600, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(609, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(614, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(617, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(620, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(623, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(626, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(345, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63,]; let shifted : & 'static [u8] =
            & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(600, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(609, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(614, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(617, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(620, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(631, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 61,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(43,
            ::rusty_lr::parser::state::ShiftTarget::new(624, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![61]; __reduce_map.extend(__rustylr_tset85.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [59,
            61,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(19, ::rusty_lr::parser::state::ShiftTarget::new(633, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [85,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(546, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(573, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(634, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(636, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(642, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(646, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(653, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(19,
            ::rusty_lr::parser::state::ShiftTarget::new(635, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [86,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(546, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(573, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(634, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(636, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(642, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(646, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(653, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(637, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [92, 93,]; let shifted : & 'static [u8] = &
            [1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(638, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(638, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(638, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 92, 93,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(639, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 92, 93,]; let shifted : & 'static [u8] =
            & [1, 3, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(640, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(847, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(850, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(852, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(856, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(860, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(864, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(871, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(871, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(871, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(871, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(871, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(871, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(871, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 92, 93, 93, 94, 97, 98, 99,
            100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(19,
            ::rusty_lr::parser::state::ShiftTarget::new(641, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![7]; __reduce_map.extend(__rustylr_tset75.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [7, 84,];
            let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(640, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(847, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(850, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(852, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(856, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(860, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(864, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(643, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [94,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(644, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(644, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(644, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 94,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(645, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 94,]; let shifted : & 'static [u8] = &
            [1, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(546, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(573, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(634, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(636, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(642, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(646, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(653, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(647, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [97,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(648, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(648, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(648, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(649, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 97,]; let shifted : & 'static [u8] = &
            [1, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(546, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(573, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(634, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(636, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(642, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(646, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(653, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(651, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(782, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(785, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(787, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(810, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(814, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(818, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(825, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(825, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(825, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(825, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(825, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(825, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(825, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(19,
            ::rusty_lr::parser::state::ShiftTarget::new(652, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![7]; __reduce_map.extend(__rustylr_tset75.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [7, 84,];
            let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(651, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(782, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(785, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(787, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(810, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(814, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(818, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(654, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [99, 100,]; let shifted : & 'static [u8] = &
            [1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(716, true)),
            (translation_unitNonTerminals::declaration_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(716, true)),
            (translation_unitNonTerminals::declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(716, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(734, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 90, 91, 95, 96, 99, 100, 106, 107, 119, 120, 144, 145,
            146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
            161, 162, 170, 171, 176, 177, 178, 179, 192, 193,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(45, ::rusty_lr::parser::state::ShiftTarget::new(656, true)), (46,
            ::rusty_lr::parser::state::ShiftTarget::new(703, true)), (47,
            ::rusty_lr::parser::state::ShiftTarget::new(704, true)), (48,
            ::rusty_lr::parser::state::ShiftTarget::new(705, true)), (49,
            ::rusty_lr::parser::state::ShiftTarget::new(706, true)), (50,
            ::rusty_lr::parser::state::ShiftTarget::new(707, true)), (51,
            ::rusty_lr::parser::state::ShiftTarget::new(708, true)), (52,
            ::rusty_lr::parser::state::ShiftTarget::new(709, true)), (53,
            ::rusty_lr::parser::state::ShiftTarget::new(710, true)), (54,
            ::rusty_lr::parser::state::ShiftTarget::new(711, true)), (55,
            ::rusty_lr::parser::state::ShiftTarget::new(712, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![32]; __reduce_map.extend(__rustylr_tset87.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [32, 65,
            66, 67, 68, 69, 70, 71, 72, 73, 74, 75,]; let shifted : & 'static [u8] = &
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(348, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(348, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(30, ::rusty_lr::parser::state::ShiftTarget::new(658, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(659, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(660, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![38]; __reduce_map.extend(__rustylr_tset88.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 38,]; let shifted : & 'static [u8] = & [1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(217, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(99, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(101, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(28,
            ::rusty_lr::parser::state::ShiftTarget::new(662, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(664, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![41]; __reduce_map.extend(__rustylr_tset89.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            41,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(663, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(663, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(663, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 40,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(658, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(659, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(660, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![40]; __reduce_map.extend(__rustylr_tset88.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 40,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(665, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(665, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(665, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 39,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(30,
            ::rusty_lr::parser::state::ShiftTarget::new(658, true)), (31,
            ::rusty_lr::parser::state::ShiftTarget::new(659, true)), (32,
            ::rusty_lr::parser::state::ShiftTarget::new(660, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![39]; __reduce_map.extend(__rustylr_tset88.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [35, 36,
            37, 39,]; let shifted : & 'static [u8] = & [1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(667, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(669, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![44]; __reduce_map.extend(__rustylr_tset90.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            44,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(668, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 42,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(662, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(664, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![42]; __reduce_map.extend(__rustylr_tset89.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            42,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(670, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 43,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(28, ::rusty_lr::parser::state::ShiftTarget::new(662, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(664, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![43]; __reduce_map.extend(__rustylr_tset89.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [39, 40,
            43,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(35, ::rusty_lr::parser::state::ShiftTarget::new(672, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(674, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(676, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(678, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![49]; __reduce_map.extend(__rustylr_tset91.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 49,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(673, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 45,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(667, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(669, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![45]; __reduce_map.extend(__rustylr_tset90.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            45,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(675, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 46,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(667, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(669, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![46]; __reduce_map.extend(__rustylr_tset90.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            46,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(677, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 47,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(667, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(669, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![47]; __reduce_map.extend(__rustylr_tset90.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            47,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(679, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 48,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(33,
            ::rusty_lr::parser::state::ShiftTarget::new(667, true)), (34,
            ::rusty_lr::parser::state::ShiftTarget::new(669, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![48]; __reduce_map.extend(__rustylr_tset90.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [42, 43,
            48,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(681, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(683, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![52]; __reduce_map.extend(__rustylr_tset92.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            52,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(682, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(672, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(674, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(676, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(678, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![50]; __reduce_map.extend(__rustylr_tset91.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 50,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(684, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(35,
            ::rusty_lr::parser::state::ShiftTarget::new(672, true)), (36,
            ::rusty_lr::parser::state::ShiftTarget::new(674, true)), (39,
            ::rusty_lr::parser::state::ShiftTarget::new(676, true)), (40,
            ::rusty_lr::parser::state::ShiftTarget::new(678, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![51]; __reduce_map.extend(__rustylr_tset91.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [45, 46,
            47, 48, 51,]; let shifted : & 'static [u8] = & [1, 1, 1, 1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(25,
            ::rusty_lr::parser::state::ShiftTarget::new(686, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![54]; __reduce_map.extend(__rustylr_tset93.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [53,
            54,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(687, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule,
            & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(41, ::rusty_lr::parser::state::ShiftTarget::new(681, true)), (42,
            ::rusty_lr::parser::state::ShiftTarget::new(683, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![53]; __reduce_map.extend(__rustylr_tset92.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [50, 51,
            53,]; let shifted : & 'static [u8] = & [1, 1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(37, ::rusty_lr::parser::state::ShiftTarget::new(689, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![56]; __reduce_map.extend(__rustylr_tset94.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [55, 56,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(690, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            55,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(25, ::rusty_lr::parser::state::ShiftTarget::new(686, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![55]; __reduce_map.extend(__rustylr_tset93.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [53, 55,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(692, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![58]; __reduce_map.extend(__rustylr_tset95.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            58,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(693, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 57,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(37,
            ::rusty_lr::parser::state::ShiftTarget::new(689, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![57]; __reduce_map.extend(__rustylr_tset94.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [55,
            57,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(43, ::rusty_lr::parser::state::ShiftTarget::new(695, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![60]; __reduce_map.extend(__rustylr_tset96.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [59, 60,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(696, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 59,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(38,
            ::rusty_lr::parser::state::ShiftTarget::new(692, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![59]; __reduce_map.extend(__rustylr_tset95.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [57,
            59,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(18, ::rusty_lr::parser::state::ShiftTarget::new(698, true)), (44,
            ::rusty_lr::parser::state::ShiftTarget::new(701, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![62]; __reduce_map.extend(__rustylr_tset64.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [61, 62,
            63,]; let shifted : & 'static [u8] = & [1, 1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(122, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(258, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(259, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(260, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(261, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(265, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(266, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(267, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(268, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(269, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(289, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(291, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(304, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(309, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(314, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(323, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(328, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(331, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(334, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(337, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(340, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(699, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(699, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(699, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75, 76, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(15,
            ::rusty_lr::parser::state::ShiftTarget::new(343, true)), (19,
            ::rusty_lr::parser::state::ShiftTarget::new(700, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [63, 77,]; let shifted : & 'static [u8] = &
            [3, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(345, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63,]; let shifted : & 'static [u8] =
            & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(551, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(552, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(553, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(554, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(555, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(556, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(557, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(558, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(559, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(702, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 61,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(43,
            ::rusty_lr::parser::state::ShiftTarget::new(695, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![61]; __reduce_map.extend(__rustylr_tset96.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [59,
            61,]; let shifted : & 'static [u8] = & [1, 3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(350, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(350, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(352, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(352, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(354, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(354, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(356, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(356, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(358, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(358, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(360, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(360, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(362, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(362, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(364, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(364, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(366, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(366, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(368, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(368, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(15, ::rusty_lr::parser::state::ShiftTarget::new(714, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(715, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 91,]; let shifted : & 'static [u8] = &
            [1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(126, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(126, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 77,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![91]; __reduce_map.extend(__rustylr_tset76.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [91,]; let shifted : & 'static [u8] = & [2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(717, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 90, 91, 99, 100,]; let shifted : & 'static [u8] = & [0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
            3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (2,
            ::rusty_lr::parser::state::ShiftTarget::new(718, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(731, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(731, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(731, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 99, 100,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(546, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(573, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(634, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(636, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(642, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(646, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(653, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(720, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [101,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(16,
            ::rusty_lr::parser::state::ShiftTarget::new(721, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [101,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![101]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [101,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(16, ::rusty_lr::parser::state::ShiftTarget::new(723, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [102,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![102]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [102,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(16, ::rusty_lr::parser::state::ShiftTarget::new(725, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [103,]; let shifted : & 'static
            [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![103]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [103,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(727, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(728, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(728, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(728, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 104, 105,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![104]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [104,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(15, ::rusty_lr::parser::state::ShiftTarget::new(714, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(729, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 105,]; let shifted : & 'static [u8] = &
            [1, 2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![105]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [105,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![99]; __reduce_map.extend(__rustylr_tset97.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [99,]; let shifted : & 'static [u8] = & [6,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(732, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 100,]; let shifted : & 'static [u8] = &
            [1, 5,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(546, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(573, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(634, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(636, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(642, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(646, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(653, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![100]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [100,]; let
            shifted : & 'static [u8] = & [7,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(735, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(736, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(738, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(453, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::init_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(772, true)),
            (translation_unitNonTerminals::init_declarator_list,
            ::rusty_lr::parser::state::ShiftTarget::new(773, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [106, 107, 119, 120, 121, 122, 123, 124, 125,
            126, 127, 128, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
            156, 157, 158, 159, 160, 161, 162, 170, 171, 176, 177, 178, 179, 184, 185,
            186, 187, 193,]; let shifted : & 'static [u8] = & [1, 1, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![106]; __reduce_map.extend(__rustylr_tset98.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : Some(vec![106]), ruleset : { let rules :
            & 'static [u8] = & [106,]; let shifted : & 'static [u8] = & [2,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(6, true)),
            (translation_unitNonTerminals::_type_qualifierPlus63,
            ::rusty_lr::parser::state::ShiftTarget::new(7, true)),
            (translation_unitNonTerminals::_type_qualifierStar64,
            ::rusty_lr::parser::state::ShiftTarget::new(737, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![201]; __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 122, 198, 199, 200, 201,]; let shifted : & 'static [u8] = & [0, 0, 1, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(736, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(10, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [121, 122, 122, 123, 124, 125, 126, 127,
            128,]; let shifted : & 'static [u8] = & [0, 0, 2, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(45,
            ::rusty_lr::parser::state::ShiftTarget::new(739, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![184]; __reduce_map.extend(__rustylr_tset64.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [184,
            185,]; let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(740, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(771, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(771, true)),
            (translation_unitNonTerminals::initializer,
            ::rusty_lr::parser::state::ShiftTarget::new(771, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 79, 80, 81, 185,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(740, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(765, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(765, true)),
            (translation_unitNonTerminals::initializer,
            ::rusty_lr::parser::state::ShiftTarget::new(765, true)),
            (translation_unitNonTerminals::initializer_list,
            ::rusty_lr::parser::state::ShiftTarget::new(766, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 79, 80, 80, 81, 81, 82, 83,]; let shifted : & 'static [u8] = &
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            0, 1, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(288, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(48, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(287, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 23, 24, 25, 26, 27, 28, 29, 30, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(51, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(286, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 31,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(745, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(285, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(123, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(127, true)),
            (translation_unitNonTerminals::specifier_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(128, true)),
            (translation_unitNonTerminals::type_name,
            ::rusty_lr::parser::state::ShiftTarget::new(746, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(131, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_specifier_qualifierPlus65,
            ::rusty_lr::parser::state::ShiftTarget::new(169, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12,
            13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
            33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
            52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
            71, 72, 73, 74, 75, 76, 77, 119, 120, 141, 142, 143, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 170, 171, 176, 177, 178, 179, 202, 203,]; let
            shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, &
            shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted
            : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(747, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [33,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(745, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(284, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(745, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(283, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(745, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(282, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(745, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(281, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(745, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(280, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(745, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(279, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33,];
            let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(45,
            ::rusty_lr::parser::state::ShiftTarget::new(754, true)), (46,
            ::rusty_lr::parser::state::ShiftTarget::new(755, true)), (47,
            ::rusty_lr::parser::state::ShiftTarget::new(756, true)), (48,
            ::rusty_lr::parser::state::ShiftTarget::new(757, true)), (49,
            ::rusty_lr::parser::state::ShiftTarget::new(758, true)), (50,
            ::rusty_lr::parser::state::ShiftTarget::new(759, true)), (51,
            ::rusty_lr::parser::state::ShiftTarget::new(760, true)), (52,
            ::rusty_lr::parser::state::ShiftTarget::new(761, true)), (53,
            ::rusty_lr::parser::state::ShiftTarget::new(762, true)), (54,
            ::rusty_lr::parser::state::ShiftTarget::new(763, true)), (55,
            ::rusty_lr::parser::state::ShiftTarget::new(764, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![32]; __reduce_map.extend(__rustylr_tset99.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [32, 65,
            66, 67, 68, 69, 70, 71, 72, 73, 74, 75,]; let shifted : & 'static [u8] = &
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,]; rules.iter().zip(shifted.iter()).map(|
            (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as
            usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(348, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(348, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 65, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(350, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(350, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(352, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(352, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(354, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(354, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(356, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(356, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(358, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(358, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 70, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(360, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(360, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 71,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(362, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(362, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            72, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(364, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(364, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 73, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(366, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(366, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 74, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(368, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(368, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 75,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![82]; __reduce_map.extend(__rustylr_tset8.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [82,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(14,
            ::rusty_lr::parser::state::ShiftTarget::new(767, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(768, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [80, 81, 83,]; let shifted : & 'static [u8] =
            & [2, 2, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![80]; __reduce_map
            .extend(__rustylr_tset100.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [80,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(37, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(740, true)), (14,
            ::rusty_lr::parser::state::ShiftTarget::new(769, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(741, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(742, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(743, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(744, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(748, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(749, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(750, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(751, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(752, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(753, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(492, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(496, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(501, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(506, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(515, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(520, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(523, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(526, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(529, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(532, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(770, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(770, true)),
            (translation_unitNonTerminals::initializer,
            ::rusty_lr::parser::state::ShiftTarget::new(770, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 79, 80, 81, 81, 83,]; let shifted : & 'static [u8] = & [0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![81]; __reduce_map
            .extend(__rustylr_tset100.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [81,]; let
            shifted : & 'static [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![83]; __reduce_map.extend(__rustylr_tset8.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [83,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![185]; __reduce_map
            .extend(__rustylr_tset64.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [185,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![186]; __reduce_map.extend(__rustylr_tset64.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [186,]; let shifted : & 'static [u8] = & [1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(15,
            ::rusty_lr::parser::state::ShiftTarget::new(774, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(776, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [107, 187,]; let shifted : & 'static [u8] = &
            [2, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(736, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(738, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::init_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(775, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [121, 122, 123, 124, 125, 126, 127, 128, 184,
            185, 187,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![187]; __reduce_map
            .extend(__rustylr_tset64.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [187,]; let
            shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![107]; __reduce_map.extend(__rustylr_tset98.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : Some(vec![107]), ruleset : { let rules :
            & 'static [u8] = & [107,]; let shifted : & 'static [u8] = & [3,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![188]; __reduce_map
            .extend(__rustylr_tset98.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [188,]; let
            shifted : & 'static [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(546, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(573, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(634, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(636, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(642, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(646, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(653, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(779, true)),
            (translation_unitNonTerminals::statement_or_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(779, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(779, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(779, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(779, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(779, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(779, true)),
            (translation_unitNonTerminals::declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(779, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(779, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(734, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![190]; __reduce_map.extend(__rustylr_tset25.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [0, 1, 2,
            3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25,
            26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
            45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
            64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 84, 85, 86, 87, 88,
            89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
            110, 111, 112, 113, 114, 115, 119, 120, 144, 145, 146, 147, 148, 149, 150,
            151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 176,
            177, 178, 179, 189, 190, 192, 193,]; let shifted : & 'static [u8] = & [0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
            1, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![189]; __reduce_map
            .extend(__rustylr_tset98.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [189,]; let
            shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(14, ::rusty_lr::parser::state::ShiftTarget::new(781, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [89,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![89]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : Some(vec![89]), ruleset : { let rules : & 'static [u8] = &
            [89,]; let shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(600, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(609, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(614, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(617, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(620, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(623, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(626, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(783, true)),
            (translation_unitNonTerminals::constant_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(783, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 78, 85,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(19, ::rusty_lr::parser::state::ShiftTarget::new(784, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [85,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(651, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(782, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(785, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(787, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(810, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(814, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(818, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(19,
            ::rusty_lr::parser::state::ShiftTarget::new(786, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [86,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(651, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(782, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(785, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(787, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(810, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(814, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(818, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(788, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [92, 93,]; let shifted : & 'static [u8] = &
            [1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(789, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(789, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(789, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 92, 93,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(790, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 92, 93,]; let shifted : & 'static [u8] =
            & [1, 3, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(791, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(793, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(796, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(798, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(802, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(806, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(833, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(844, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(844, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(844, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(844, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(844, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(844, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(844, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 92, 93, 93, 94, 97, 98, 99,
            100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(19,
            ::rusty_lr::parser::state::ShiftTarget::new(792, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![7]; __reduce_map.extend(__rustylr_tset75.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [7, 84,];
            let shifted : & 'static [u8] = & [1, 1,]; rules.iter().zip(shifted.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(791, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(793, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(796, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(798, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(802, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(806, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(833, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(843, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(600, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(609, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(614, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(617, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(620, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(623, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(626, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(794, true)),
            (translation_unitNonTerminals::constant_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(794, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 78, 85,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(19, ::rusty_lr::parser::state::ShiftTarget::new(795, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [85,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(791, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(793, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(796, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(798, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(802, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(806, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(833, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(19,
            ::rusty_lr::parser::state::ShiftTarget::new(797, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [86,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(791, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(793, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(796, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(798, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(802, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(806, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(833, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(799, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [92, 93,]; let shifted : & 'static [u8] = &
            [1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(800, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(800, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(800, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 92, 93,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(801, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 92, 93,]; let shifted : & 'static [u8] =
            & [1, 3, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(791, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(793, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(796, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(798, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(802, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(806, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(833, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 92, 93, 93, 94, 97, 98, 99,
            100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(803, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [94,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(804, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(804, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(804, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 94,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(805, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 94,]; let shifted : & 'static [u8] = &
            [1, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(791, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(793, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(796, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(798, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(802, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(806, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(833, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(807, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [97,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(808, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(808, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(808, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(809, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 97,]; let shifted : & 'static [u8] = &
            [1, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(791, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(793, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(796, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(798, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(802, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(806, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(833, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(811, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [94,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(812, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(812, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(812, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 94,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(813, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 94,]; let shifted : & 'static [u8] = &
            [1, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(651, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(782, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(785, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(787, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(810, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(814, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(818, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(815, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [97,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(816, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(816, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(816, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(817, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 97,]; let shifted : & 'static [u8] = &
            [1, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(651, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(782, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(785, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(787, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(810, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(814, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(818, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(819, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [99, 100,]; let shifted : & 'static [u8] = &
            [1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(820, true)),
            (translation_unitNonTerminals::declaration_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(820, true)),
            (translation_unitNonTerminals::declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(820, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(734, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 90, 91, 95, 96, 99, 100, 106, 107, 119, 120, 144, 145,
            146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
            161, 162, 170, 171, 176, 177, 178, 179, 192, 193,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(821, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 90, 91, 99, 100,]; let shifted : & 'static [u8] = & [0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
            3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (2,
            ::rusty_lr::parser::state::ShiftTarget::new(822, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(823, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(823, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(823, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 99, 100,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(651, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(782, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(785, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(787, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(810, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(814, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(818, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(824, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 100,]; let shifted : & 'static [u8] = &
            [1, 5,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(651, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(782, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(785, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(787, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(810, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(814, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(818, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(61,
            ::rusty_lr::parser::state::ShiftTarget::new(826, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [98,]; let shifted : & 'static [u8] = & [2,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(827, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [98,]; let shifted : & 'static [u8] = & [3,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(828, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(828, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(828, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 98,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(829, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 98,]; let shifted : & 'static [u8] = &
            [1, 5,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(16,
            ::rusty_lr::parser::state::ShiftTarget::new(830, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [98,]; let shifted : & 'static [u8] = & [6,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![98]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [98,]; let
            shifted : & 'static [u8] = & [7,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![97]; __reduce_map.extend(__rustylr_tset97.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [97,]; let shifted : & 'static [u8] = & [5,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![94]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [94,]; let
            shifted : & 'static [u8] = & [5,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(834, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [99, 100,]; let shifted : & 'static [u8] = &
            [1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(835, true)),
            (translation_unitNonTerminals::declaration_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(835, true)),
            (translation_unitNonTerminals::declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(835, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(734, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 90, 91, 95, 96, 99, 100, 106, 107, 119, 120, 144, 145,
            146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
            161, 162, 170, 171, 176, 177, 178, 179, 192, 193,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(836, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 90, 91, 99, 100,]; let shifted : & 'static [u8] = & [0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
            3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (2,
            ::rusty_lr::parser::state::ShiftTarget::new(837, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(838, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(838, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(838, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 99, 100,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(791, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(793, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(796, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(798, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(802, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(806, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(833, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(839, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 100,]; let shifted : & 'static [u8] = &
            [1, 5,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(791, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(793, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(796, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(798, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(802, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(806, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(833, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![92]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [92,]; let
            shifted : & 'static [u8] = & [5,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![86]; __reduce_map.extend(__rustylr_tset97.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [86,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![85]; __reduce_map
            .extend(__rustylr_tset97.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [85,]; let
            shifted : & 'static [u8] = & [4,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new(); let
            reduce_rules = vec![84]; __reduce_map.extend(__rustylr_tset97.iter().map(|
            term | (* term, reduce_rules.clone()))); __reduce_map.into_iter().collect()
            }, error_reduce : None, eof_reduce : None, ruleset : { let rules : & 'static
            [u8] = & [84,]; let shifted : & 'static [u8] = & [3,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(59,
            ::rusty_lr::parser::state::ShiftTarget::new(845, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![92]; __reduce_map.extend(__rustylr_tset101.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [92,
            93,]; let shifted : & 'static [u8] = & [5, 5,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(651, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(782, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(785, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(787, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(810, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(814, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(818, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![93]; __reduce_map
            .extend(__rustylr_tset98.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [93,]; let
            shifted : & 'static [u8] = & [7,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(574, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(577, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(578, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(579, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(580, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(581, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(582, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(583, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(584, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(585, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(586, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(590, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(595, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(600, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(609, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(614, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(617, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(620, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(623, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(626, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(848, true)),
            (translation_unitNonTerminals::constant_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(848, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 78, 85,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(19, ::rusty_lr::parser::state::ShiftTarget::new(849, true)),],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce : None,
            ruleset : { let rules : & 'static [u8] = & [85,]; let shifted : & 'static
            [u8] = & [2,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(640, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(847, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(850, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(852, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(856, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(860, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(864, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(842, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(19,
            ::rusty_lr::parser::state::ShiftTarget::new(851, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [86,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(640, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(847, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(850, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(852, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(856, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(860, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(864, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(841, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(853, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [92, 93,]; let shifted : & 'static [u8] = &
            [1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(854, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(854, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(854, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 92, 93,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(855, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 92, 93,]; let shifted : & 'static [u8] =
            & [1, 3, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(640, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(847, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(850, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(852, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(856, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(860, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(864, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(840, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 92, 93, 93, 94, 97, 98, 99,
            100, 101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(857, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [94,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(858, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(858, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(858, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 94,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(859, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 94,]; let shifted : & 'static [u8] = &
            [1, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(640, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(847, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(850, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(852, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(856, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(860, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(864, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(832, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(861, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [97,]; let shifted : & 'static [u8] = & [1,];
            rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(862, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(862, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(862, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 97,]; let shifted : & 'static [u8] = & [0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(863, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 97,]; let shifted : & 'static [u8] = &
            [1, 3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(640, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(847, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(850, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(852, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(856, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(860, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(864, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(831, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(1,
            ::rusty_lr::parser::state::ShiftTarget::new(865, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [99, 100,]; let shifted : & 'static [u8] = &
            [1, 1,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(866, true)),
            (translation_unitNonTerminals::declaration_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(866, true)),
            (translation_unitNonTerminals::declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(866, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(734, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 90, 91, 95, 96, 99, 100, 106, 107, 119, 120, 144, 145,
            146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
            161, 162, 170, 171, 176, 177, 178, 179, 192, 193,]; let shifted : & 'static
            [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]; rules.iter().zip(shifted.iter())
            .map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule
            as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(867, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 90, 91, 99, 100,]; let shifted : & 'static [u8] = & [0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
            3,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(36, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(38, true)), (2,
            ::rusty_lr::parser::state::ShiftTarget::new(868, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(47, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(49, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(50, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(52, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(54, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(55, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(56, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(57, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(58, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(65, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(67, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(74, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(77, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(81, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(89, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(108, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(111, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(114, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(117, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(120, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(869, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(869, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(869, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 99, 100,]; let shifted : & 'static [u8] = & [0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(640, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(847, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(850, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(852, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(856, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(860, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(864, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(730, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(2,
            ::rusty_lr::parser::state::ShiftTarget::new(870, true)), (15,
            ::rusty_lr::parser::state::ShiftTarget::new(125, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [77, 100,]; let shifted : & 'static [u8] = &
            [1, 5,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(640, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(847, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(850, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(852, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(856, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(860, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(864, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(733, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(59,
            ::rusty_lr::parser::state::ShiftTarget::new(872, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm : vec![], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![92]; __reduce_map.extend(__rustylr_tset98.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [92,
            93,]; let shifted : & 'static [u8] = & [5, 5,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(546, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(548, true)), (3,
            ::rusty_lr::parser::state::ShiftTarget::new(39, true)), (4,
            ::rusty_lr::parser::state::ShiftTarget::new(40, true)), (5,
            ::rusty_lr::parser::state::ShiftTarget::new(41, true)), (6,
            ::rusty_lr::parser::state::ShiftTarget::new(42, true)), (7,
            ::rusty_lr::parser::state::ShiftTarget::new(43, true)), (8,
            ::rusty_lr::parser::state::ShiftTarget::new(44, true)), (9,
            ::rusty_lr::parser::state::ShiftTarget::new(45, true)), (10,
            ::rusty_lr::parser::state::ShiftTarget::new(46, true)), (13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(560, true)), (22,
            ::rusty_lr::parser::state::ShiftTarget::new(561, true)), (23,
            ::rusty_lr::parser::state::ShiftTarget::new(562, true)), (24,
            ::rusty_lr::parser::state::ShiftTarget::new(563, true)), (25,
            ::rusty_lr::parser::state::ShiftTarget::new(564, true)), (26,
            ::rusty_lr::parser::state::ShiftTarget::new(568, true)), (27,
            ::rusty_lr::parser::state::ShiftTarget::new(569, true)), (28,
            ::rusty_lr::parser::state::ShiftTarget::new(570, true)), (29,
            ::rusty_lr::parser::state::ShiftTarget::new(571, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(572, true)), (56,
            ::rusty_lr::parser::state::ShiftTarget::new(573, true)), (57,
            ::rusty_lr::parser::state::ShiftTarget::new(634, true)), (58,
            ::rusty_lr::parser::state::ShiftTarget::new(636, true)), (60,
            ::rusty_lr::parser::state::ShiftTarget::new(642, true)), (61,
            ::rusty_lr::parser::state::ShiftTarget::new(646, true)), (62,
            ::rusty_lr::parser::state::ShiftTarget::new(650, true)), (63,
            ::rusty_lr::parser::state::ShiftTarget::new(653, true)), (64,
            ::rusty_lr::parser::state::ShiftTarget::new(719, true)), (65,
            ::rusty_lr::parser::state::ShiftTarget::new(722, true)), (66,
            ::rusty_lr::parser::state::ShiftTarget::new(724, true)), (67,
            ::rusty_lr::parser::state::ShiftTarget::new(726, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::Constant,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::primary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::postfix_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(59, true)),
            (translation_unitNonTerminals::unary_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(655, true)),
            (translation_unitNonTerminals::cast_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::multiplicative_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(657, true)),
            (translation_unitNonTerminals::additive_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(661, true)),
            (translation_unitNonTerminals::shift_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(666, true)),
            (translation_unitNonTerminals::relational_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(671, true)),
            (translation_unitNonTerminals::equality_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(680, true)),
            (translation_unitNonTerminals::and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(685, true)),
            (translation_unitNonTerminals::exclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(688, true)),
            (translation_unitNonTerminals::inclusive_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(691, true)),
            (translation_unitNonTerminals::logical_and_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(694, true)),
            (translation_unitNonTerminals::logical_or_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(697, true)),
            (translation_unitNonTerminals::conditional_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::assignment_expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::expression,
            ::rusty_lr::parser::state::ShiftTarget::new(713, true)),
            (translation_unitNonTerminals::labeled_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::expression_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::selection_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::iteration_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::jump_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),
            (translation_unitNonTerminals::statement,
            ::rusty_lr::parser::state::ShiftTarget::new(846, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
            14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
            35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
            54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
            73, 74, 75, 76, 77, 84, 85, 86, 89, 90, 91, 92, 93, 93, 94, 97, 98, 99, 100,
            101, 102, 103, 104, 105, 110, 111, 112, 113, 114, 115,]; let shifted : &
            'static [u8] = & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![109]; __reduce_map
            .extend(__rustylr_tset74.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : Some(vec![109]), ruleset : { let rules : & 'static [u8] = &
            [109,]; let shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (16,
            ::rusty_lr::parser::state::ShiftTarget::new(735, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(875, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(877, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(453, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::init_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(772, true)),
            (translation_unitNonTerminals::init_declarator_list,
            ::rusty_lr::parser::state::ShiftTarget::new(773, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [106, 107, 108, 119, 120, 121, 122, 123, 124,
            125, 126, 127, 128, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
            155, 156, 157, 158, 159, 160, 161, 162, 170, 171, 176, 177, 178, 179, 184,
            185, 186, 187, 193,]; let shifted : & 'static [u8] = & [1, 1, 1, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term :
            vec![(73, ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(6, true)),
            (translation_unitNonTerminals::_type_qualifierPlus63,
            ::rusty_lr::parser::state::ShiftTarget::new(7, true)),
            (translation_unitNonTerminals::_type_qualifierStar64,
            ::rusty_lr::parser::state::ShiftTarget::new(876, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![201]; __reduce_map.extend(__rustylr_tset1.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [119,
            120, 122, 198, 199, 200, 201,]; let shifted : & 'static [u8] = & [0, 0, 1, 0,
            0, 0, 0,]; rules.iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(0, ::rusty_lr::parser::state::ShiftTarget::new(1,
            true)), (1, ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(875, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(10, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : None, ruleset : {
            let rules : & 'static [u8] = & [121, 122, 122, 123, 124, 125, 126, 127,
            128,]; let shifted : & 'static [u8] = & [0, 0, 2, 0, 0, 0, 0, 0, 0,]; rules
            .iter().zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![(13,
            ::rusty_lr::parser::state::ShiftTarget::new(545, true)), (45,
            ::rusty_lr::parser::state::ShiftTarget::new(739, true)),], error_shift :
            None, eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::compound_statement,
            ::rusty_lr::parser::state::ShiftTarget::new(878, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); let reduce_rules =
            vec![184]; __reduce_map.extend(__rustylr_tset64.iter().map(| term | (* term,
            reduce_rules.clone()))); __reduce_map.into_iter().collect() }, error_reduce :
            None, eof_reduce : None, ruleset : { let rules : & 'static [u8] = & [89, 108,
            184, 185,]; let shifted : & 'static [u8] = & [0, 2, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![108]; __reduce_map
            .extend(__rustylr_tset74.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : Some(vec![108]), ruleset : { let rules : & 'static [u8] = &
            [108,]; let shifted : & 'static [u8] = & [3,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![(0,
            ::rusty_lr::parser::state::ShiftTarget::new(1, true)), (1,
            ::rusty_lr::parser::state::ShiftTarget::new(2, true)), (30,
            ::rusty_lr::parser::state::ShiftTarget::new(539, true)), (68,
            ::rusty_lr::parser::state::ShiftTarget::new(14, true)), (69,
            ::rusty_lr::parser::state::ShiftTarget::new(15, true)), (70,
            ::rusty_lr::parser::state::ShiftTarget::new(16, true)), (71,
            ::rusty_lr::parser::state::ShiftTarget::new(17, true)), (72,
            ::rusty_lr::parser::state::ShiftTarget::new(18, true)), (73,
            ::rusty_lr::parser::state::ShiftTarget::new(4, true)), (74,
            ::rusty_lr::parser::state::ShiftTarget::new(5, true)), (75,
            ::rusty_lr::parser::state::ShiftTarget::new(19, true)), (76,
            ::rusty_lr::parser::state::ShiftTarget::new(20, true)), (77,
            ::rusty_lr::parser::state::ShiftTarget::new(21, true)), (78,
            ::rusty_lr::parser::state::ShiftTarget::new(22, true)), (79,
            ::rusty_lr::parser::state::ShiftTarget::new(23, true)), (80,
            ::rusty_lr::parser::state::ShiftTarget::new(24, true)), (81,
            ::rusty_lr::parser::state::ShiftTarget::new(25, true)), (82,
            ::rusty_lr::parser::state::ShiftTarget::new(26, true)), (83,
            ::rusty_lr::parser::state::ShiftTarget::new(27, true)), (84,
            ::rusty_lr::parser::state::ShiftTarget::new(28, true)), (85,
            ::rusty_lr::parser::state::ShiftTarget::new(29, true)), (86,
            ::rusty_lr::parser::state::ShiftTarget::new(30, true)),], error_shift : None,
            eof_shift : None, shift_goto_map_nonterm :
            vec![(translation_unitNonTerminals::declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(880, true)),
            (translation_unitNonTerminals::function_definition,
            ::rusty_lr::parser::state::ShiftTarget::new(880, true)),
            (translation_unitNonTerminals::external_declaration,
            ::rusty_lr::parser::state::ShiftTarget::new(880, true)),
            (translation_unitNonTerminals::type_qualifier,
            ::rusty_lr::parser::state::ShiftTarget::new(144, true)),
            (translation_unitNonTerminals::declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(544, true)),
            (translation_unitNonTerminals::direct_declarator,
            ::rusty_lr::parser::state::ShiftTarget::new(11, true)),
            (translation_unitNonTerminals::type_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(145, true)),
            (translation_unitNonTerminals::storage_class_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(146, true)),
            (translation_unitNonTerminals::declaration_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(147, true)),
            (translation_unitNonTerminals::struct_or_union,
            ::rusty_lr::parser::state::ShiftTarget::new(132, true)),
            (translation_unitNonTerminals::struct_or_union_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(137, true)),
            (translation_unitNonTerminals::enum_specifier,
            ::rusty_lr::parser::state::ShiftTarget::new(138, true)),
            (translation_unitNonTerminals::_declaration_specifierPlus60,
            ::rusty_lr::parser::state::ShiftTarget::new(874, true)),], reduce_map : { let
            mut __reduce_map = std::collections::BTreeMap::new(); __reduce_map
            .into_iter().collect() }, error_reduce : None, eof_reduce : Some(vec![196]),
            ruleset : { let rules : & 'static [u8] = & [106, 107, 108, 109, 116, 117,
            119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 144, 145, 146, 147, 148,
            149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 170,
            171, 176, 177, 178, 179, 192, 193, 195, 196,]; let shifted : & 'static [u8] =
            & [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,]; rules.iter()
            .zip(shifted.iter()).map(| (& rule, & shifted) | {
            ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize, shifted : shifted as
            usize, } }).collect() } }, ::rusty_lr::parser::state::IntermediateState {
            shift_goto_map_term : vec![], error_shift : None, eof_shift : None,
            shift_goto_map_nonterm : vec![], reduce_map : { let mut __reduce_map =
            std::collections::BTreeMap::new(); let reduce_rules = vec![195]; __reduce_map
            .extend(__rustylr_tset74.iter().map(| term | (* term, reduce_rules
            .clone()))); __reduce_map.into_iter().collect() }, error_reduce : None,
            eof_reduce : Some(vec![195]), ruleset : { let rules : & 'static [u8] = &
            [195,]; let shifted : & 'static [u8] = & [2,]; rules.iter().zip(shifted
            .iter()).map(| (& rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef {
            rule : rule as usize, shifted : shifted as usize, } }).collect() } },
            ::rusty_lr::parser::state::IntermediateState { shift_goto_map_term : vec![],
            error_shift : None, eof_shift : None, shift_goto_map_nonterm : vec![],
            reduce_map : { let mut __reduce_map = std::collections::BTreeMap::new();
            __reduce_map.into_iter().collect() }, error_reduce : None, eof_reduce :
            Some(vec![118]), ruleset : { let rules : & 'static [u8] = & [118,]; let
            shifted : & 'static [u8] = & [1,]; rules.iter().zip(shifted.iter()).map(| (&
            rule, & shifted) | { ::rusty_lr::rule::ShiftedRuleRef { rule : rule as usize,
            shifted : shifted as usize, } }).collect() } },
        ];
        let states: Vec<translation_unitState> = states
            .into_iter()
            .map(|state| state.into())
            .collect();
        Self {
            rules,
            states,
            classes: vec![
                vec!["ident",], vec!["lparen",], vec!["rparen",],
                vec!["string_literal",], vec!["constant_character",],
                vec!["constant_integer",], vec!["constant_long",],
                vec!["constant_unsigned_integer",], vec!["constant_unsigned_long",],
                vec!["constant_float",], vec!["constant_double",], vec!["lbracket",],
                vec!["rbracket",], vec!["lbrace",], vec!["rbrace",], vec!["comma",],
                vec!["semicolon",], vec!["ellipsis",], vec!["question",], vec!["colon",],
                vec!["dot",], vec!["ptr_op",], vec!["inc_op",], vec!["dec_op",],
                vec!["sizeof",], vec!["ampersand",], vec!["exclamation",],
                vec!["tilde",], vec!["minus",], vec!["plus",], vec!["star",],
                vec!["slash",], vec!["percent",], vec!["left_op",], vec!["right_op",],
                vec!["less",], vec!["greater",], vec!["caret",], vec!["pipe",],
                vec!["le",], vec!["ge",], vec!["eq",], vec!["ne",], vec!["and_op",],
                vec!["or_op",], vec!["assign",], vec!["mul_assign",],
                vec!["div_assign",], vec!["mod_assign",], vec!["add_assign",],
                vec!["sub_assign",], vec!["left_assign",], vec!["right_assign",],
                vec!["and_assign",], vec!["xor_assign",], vec!["or_assign",],
                vec!["case",], vec!["default",], vec!["if_",], vec!["else_",],
                vec!["switch",], vec!["while_",], vec!["do_",], vec!["for_",],
                vec!["goto_",], vec!["continue_",], vec!["break_",], vec!["return_",],
                vec!["typedef",], vec!["extern_",], vec!["static_",], vec!["auto",],
                vec!["register",], vec!["const_",], vec!["volatile",], vec!["void_",],
                vec!["char_",], vec!["short_",], vec!["int_",], vec!["long_",],
                vec!["float_",], vec!["double_",], vec!["signed",], vec!["unsigned",],
                vec!["struct_",], vec!["union_",], vec!["enum_",],
            ],
        }
    }
}

// ==============================Generated Codes End===============================
        